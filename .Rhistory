n <- length(dist)
u <- ((1:n)-0.5)/n
p <- qchisq(u,2)
distsorted <- sort(dist)
m <- lm(p ~ distsorted)
intercept <- m$coefficients[1]
slope <- m$coefficients[2]
plot(distsorted,p, main="QQ Plot of mahalnobis distance v chisq quantiles")
abline(intercept,slope)
invS <- solve(sigma)
delta <- apply(data, 2, function(row) { row - mu})
dist1 <- delta%*%(invS%*%t(delta))
rowDist <- sort(sqrt(diag(dist1)))
distsorted <- rowDist
n <- length(dist)
u <- ((1:n)-0.5)/n
p <- qchisq(u,2)
distsorted <- sort(dist)
m <- lm(p ~ distsorted)
intercept <- m$coefficients[1]
slope <- m$coefficients[2]
plot(distsorted,p, main="QQ Plot of mahalnobis distance v chisq quantiles")
abline(intercept,slope)
rowDist
distsorted <- rowDist
n <- length(dist)
u <- ((1:n)-0.5)/n
p <- qchisq(u,2)
#distsorted <- sort(dist)
m <- lm(p ~ distsorted)
intercept <- m$coefficients[1]
slope <- m$coefficients[2]
plot(distsorted,p, main="QQ Plot of mahalnobis distance v chisq quantiles")
abline(intercept,slope)
invS <- inv(sigma)
invS <- pinv(sigma)
invS <- solve(sigma)
invS <- solve(sigma)
delta <- apply(data, 2, function(row) { (row - mu)^2 })
dist1 <- delta%*%(invS%*%t(delta))
rowDist <- sort(sqrt(diag(dist1)))
distsorted <- rowDist
n <- length(dist)
u <- ((1:n)-0.5)/n
p <- qchisq(u,2)
#distsorted <- sort(dist)
m <- lm(p ~ distsorted)
intercept <- m$coefficients[1]
slope <- m$coefficients[2]
plot(distsorted,p, main="QQ Plot of mahalnobis distance v chisq quantiles")
abline(intercept,slope)
sigma
sigma
rowDist
plot(density(dist, bw = 0.5),
main="Squared Mahalanobis distances, n=100, p=3") ; rug(dist)
df <- ncol(data)-1
n <- length(dist)
u <- ((1:n)-0.5)/n
p <- qchisq(u,df)
distsorted <- sort(dist)
m <- lm(p ~ distsorted)
intercept <- m$coefficients[1]
slope <- m$coefficients[2]
plot(distsorted,p, main="QQ Plot of mahalnobis distance v chisq quantiles")
abline(intercept,slope)
plot(distsorted,p, main="QQ Plot of mahalnobis distance v chisq quantiles")
abline(0,1)
dist
distsorted
p
cov(data)
mu <- colMeans(data)
delta <- apply(data, 2, function(d) d - mu)
mu <- colMeans(data)
delta <- apply(data, 2, function(d) (d - mu)^2)
delta
delta%*%t(delta)
t(delta)%*%delta
mu <- colMeans(data)
delta <- apply(data, 2, function(d) (d - mu)^2)
sigma2 <- 1/(nrow(data)-1) * t(delta)%*%delta
sigma2
mu <- colMeans(data)
delta <- apply(data, 2, function(d) (d - mu)^2)
sigma2 <- 1/(nrow(data)-1) * (t(delta)%*%delta)
sigma2
cov(data)
delta
data[,1] - mu
data[1,] - mu
head(delta)
mu <- colMeans(data)
delta <- data
for(i in 1:nrow(delta)) {
delta[i,] <- delta[i,]-mu
}
sigma2 <- 1/(nrow(data)-1) * (t(delta)%*%delta)
delta
delta <- data
for(i in 1:nrow(delta)) {
delta[i,] <- (delta[i,]-mu)^2
}
sigma2 <- 1/(nrow(data)-1) * (t(delta)%*%delta)
sigma2 <- 1/(nrow(data)-1) * (t(as.matrix(delta))%*%as.matrix(delta))
sigma
sigma2
sigma3 <- 1/(nrow(data)) * (t(as.matrix(delta))%*%as.matrix(delta))
sigma3
sigma2
for(i in 1:nrow(delta)) {
delta[i,] <- (delta[i,]-mu)
}
sigma2 <- 1/(nrow(data)-1) * (t(as.matrix(delta))%*%as.matrix(delta))
sigma2
mu <- colMeans(data)
delta <- data
for(i in 1:nrow(delta)) {
delta[i,] <- (delta[i,]-mu)
}
sigma2 <- 1/(nrow(data)-1) * (t(as.matrix(delta))%*%as.matrix(delta))
sigma2
cov(data)
qnorm(-1.0342194201915518)
qnorm(-1.03)
qnorm(-1.03,0,1)
dnorm(-1.03,0,1)
pnorm(-1.03,0,1)
dnorm(-1.03,0,1)
require(MVN)
mardiaTest(scale(data), qqplot=TRUE)
data2 <- read.csv("../data/test_mandible_data.csv", )
mardiaTest(data[,1:9])
require(MVN)
data2 <- read.csv("../data/test_mandible_data.csv", )
mardiaTest(data[,1:9])
data2 <- read.csv("../data/test_mandible_data.csv", )
mardiaTest(data2[,1:9])
hzTest(X)
data1 <- read.csv("../data/iris_virginica.csv", header=TRUE)
data <- (data1[,1:4])
mu <- colMeans(data)
sigma <- cov(data)
dist <- mahalanobis(data, mu, sigma)
df <- ncol(data)
n <- length(dist)
u <- ((1:n)-0.5)/n
p <- qchisq(u,df)
distsorted <- sort(dist)
plot(distsorted,p,
col="blue",
main="QQ Plot of mahalnobis distance v chisq quantiles")
abline(0,1, col="red")
hzTest(data)
dlnorm(0.838)
dlnorm(0.838809)
summary(hzTest(data))
hzTest(data)
data
dim(data0)
dim(data)
t(data)
dim(t(data))
n <- nrow(data)
S <- ((n-1)/n)*cov(data)
Y <- data%*%solve%*%t(data)
n <- nrow(data)
S <- ((n-1)/n)*cov(data)
Y <- data%*%solve(S)%*%t(data)
n <- nrow(data)
S <- ((n-1)/n)*cov(data)
d <- as.matrix(data)
Y <- d%*%solve(S)%*%t(d)
Djk <- - 2*t(Y) + matrix(diag(t(Y)))%*%matrix(c(rep(1,n)),1,n) + matrix(c(rep(1,n)),n,1)%*%diag(t(Y))
dim(Djk)
I <- matrix(c(rep(1,n)),1,n)
dim(I)
matrix(diag(t(Y)))%*%I
I <- matrix(c(rep(1,n)),1,n)
A <- matrix(diag(t(Y)))%*%I
B <-  matrix(c(rep(1,n)),n,1)%*%diag(t(Y))
Djk <- - 2*t(Y) + A + B
dim(A)
dim(B)
dim(I)
Djk
I
hzTest(data)
sqrt(2)
sum(Djk)
sum(1/2*Djk)
sum(sum(1/2*Djk))
hzTest(data2[,1:9])
M <- iris[,1:4]
hzTest(M)
mardiaTest(M)
hzTest(scale(M))
mardiaTest(M)
data1 <- read.csv("../data/iris_virginica.csv", header=TRUE)
data <- (data1[,1:4])
n <- nrow(data)
S <- ((n-1)/n)*cov(data)
d <- as.matrix(data)
Y <- d%*%solve(S)%*%t(d)
I <- matrix(c(rep(1,n)),1,n)
A <- matrix(diag(t(Y)))%*%I
B <-  matrix(c(rep(1,n)),n,1)%*%diag(t(Y))
hzTest(data)
data2 <- read.csv("../data/test_mandible_data.csv", header=TRUE)
mardiaTest(data2[,1:9])
data2 <- iris
data2 <- data2[,1:4]
head(data2)
hzTest(data2)
mardiaTest(data2)
mardiaTest(data2,qqplot=TRUE)
hzTest(data2,qqplot=TRUE)
S
qr(S)$rank
p
S
dif <- scale(data, scale = FALSE)
Dj <- diag(dif%*%solve(S)%*%t(dif))
Dj
b <- 1/(sqrt(2))*((2*p + 1)/4)^(1/(p + 4))*(n^(1/(p + 4)))
a1 <- sum(sum(exp( - (b^2)/2 * Djk)))
b1 <- sum(exp( - ((b^2)/(2 * (1 + (b^2)))) * Dj))
a1
b1
b
p <- ncol(data)
n <- nrow(data)
p <- ncol(data)
b <- 1/(sqrt(2))*((2*p + 1)/4)^(1/(p + 4))*(n^(1/(p + 4)))
a1 <- sum(sum(exp( - (b^2)/2 * Djk)))
b1 <- sum(exp( - ((b^2)/(2 * (1 + (b^2)))) * Dj))
a1
b1
b
hz <- 1/n * a1 - 2*b1
hz
hz <- 1/n * a1 - 2*((1+(b^2))^(-p/2))
hz
hz <- 1/n * a1 - 2*((1+(b^2))^(-p/2)) * b1
hz
hz <- 1/n * a1 - 2*((1+(b^2))^(-p/2)) * b1 + ((1+(2*b^2))^(-p/2))
hz
log(hz)
wb <- (1 + b^2)*(1 + 3*b^2)
a <- 1 + 2*b^2
mu <- 1 - a^(- p/2)*(1 + p*b^2/a + (p*(p + 2)*(b^4))/(2*a^2)) #HZ mean
si2 <- 2*(1 + 4*b^2)^(- p/2) + 2*a^( - p)*(1 + (2*p*b^4)/a^2 + (3*p*
(p + 2)*b^8)/(4*a^4)) - 4*wb^( - p/2)*(1 + (3*p*b^4)/(2*wb) + (p*
(p + 2)*b^8)/(2*wb^2)) #HZ variance
pmu <- log(sqrt(mu^4/(si2 + mu^2))) #lognormal HZ mean
psi <- sqrt(log((si2 + mu^2)/mu^2)) #lognormal HZ variance
P <- 1 - plnorm(HZ,pmu,psi) #P-value associated to the HZ statistic
P <- 1 - plnorm(hz,pmu,psi) #P-value associated to the HZ statistic
hz
P
pmu
psi
log(hz)
plnorm(hz,pmu,psi)
data1 <- read.csv("../data/iris_virginica.csv", header=TRUE)
data <- (data1[,1:4])
n <- nrow(data)
p <- ncol(data)
S <- ((n-1)/n)*cov(data)
d <- as.matrix(data)
Y <- d%*%solve(S)%*%t(d)
I <- matrix(c(rep(1,n)),1,n)
A <- matrix(diag(t(Y)))%*%I
B <-  matrix(c(rep(1,n)),n,1)%*%diag(t(Y))
dif <- scale(data, scale = FALSE)
Dj <- diag(dif%*%solve(S)%*%t(dif))
Djk <- - 2*t(Y) + A + B
b <- 1/(sqrt(2))*((2*p + 1)/4)^(1/(p + 4))*(n^(1/(p + 4)))
a1 <- sum(sum(exp( - (b^2)/2 * Djk)))
b1 <- sum(exp( - ((b^2)/(2 * (1 + (b^2)))) * Dj))
hz <- 1/n * a1 - 2*((1+(b^2))^(-p/2)) * b1 + ((1+(2*b^2))^(-p/2))
wb <- (1 + b^2)*(1 + 3*b^2)
a <- 1 + 2*b^2
mu <- 1 - a^(- p/2)*(1 + p*b^2/a + (p*(p + 2)*(b^4))/(2*a^2)) #HZ mean
si2 <- 2*(1 + 4*b^2)^(- p/2) + 2*a^( - p)*(1 + (2*p*b^4)/a^2 + (3*p*
(p + 2)*b^8)/(4*a^4)) - 4*wb^( - p/2)*(1 + (3*p*b^4)/(2*wb) + (p*
(p + 2)*b^8)/(2*wb^2)) #HZ variance
pmu <- log(sqrt(mu^4/(si2 + mu^2))) #lognormal HZ mean
psi <- sqrt(log((si2 + mu^2)/mu^2)) #lognormal HZ variance
P <- 1 - plnorm(hz,pmu,psi) #P-value associated to the HZ statistic
P
hzTest(data)
P
qr(S)$rank
p
nrow(data)
d2 <- data[complete.cases(data),]
nrow(d2)
n <- nrow(data)
p <- ncol(data)
S <- ((n-1)/n)*cov(data)
d <- as.matrix(data)
Y <- d%*%solve(S)%*%t(d)
I <- matrix(c(rep(1,n)),1,n)
A <- matrix(diag(t(Y)))%*%I
B <-  matrix(c(rep(1,n)),n,1)%*%diag(t(Y))
dif <- scale(data, scale = FALSE)
Dj <- diag(dif%*%solve(S)%*%t(dif))
Djk <- - 2*t(Y) + A + B
Djk
b <- 1/(sqrt(2))*((2*p + 1)/4)^(1/(p + 4))*(n^(1/(p + 4)))
a1 <- sum(sum(exp( - (b^2)/2 * Djk)))
b1 <- sum(exp( - ((b^2)/(2 * (1 + (b^2)))) * Dj))
b1
a1 <- (sum(exp( - (b^2)/2 * Djk)))
b1 <- sum(exp( - ((b^2)/(2 * (1 + (b^2)))) * Dj))
a1
sum(a1)
hz <- 1/n * a1 - 2*((1+(b^2))^(-p/2)) * b1 + ((1+(2*b^2))^(-p/2))
hz
logHz <- log(hz)
logHz
si2 <- 2*(1 + 4*b^2)^(- p/2) +
2*a^( - p)*(1 + (2*p*b^4)/a^2 +
(3*p*(p + 2)*b^8)/(4*a^4)) -
4*wb^( - p/2)*(1 + (3*p*b^4)/(2*wb)
)
si2 <- 2*(1 + 4*b^2)^(- p/2) +
2*a^( - p)*(1 + (2*p*b^4)/a^2 +
(3*p*(p + 2)*b^8)/(4*a^4)) -
4*wb^( - p/2)*(1 + (3*p*b^4)/(2*wb) )
si2
mu
b
wb
a
p
wb^(-p/2)
hz
a
b
a1
b1
si2 <- 2*(1 + 4*b^2)^(- p/2) +
2*a^( - p)*(1 + (2*p*b^4)/a^2 +
(3*p*(p + 2)*b^8)/(4*a^4)) -
4*wb^( - p/2)*(1 + (3*p*b^4)/(2*wb) )                                                                                                 + (p*(p + 2)*b^8)/(2*wb^2)) #HZ variance
pmu <- log(sqrt(mu^4/(si2 + mu^2))) #lognormal HZ mean
psi <- sqrt(log((si2 + mu^2)/mu^2)) #lognormal HZ variance
P <- 1 - plnorm(hz,pmu,psi) #P-value associated to the HZ statistic
P
pmu
psi
hz <- n * (1/(n*n) * a1 - 2*((1+(b^2))^(-p/2)) * (1/n)* b1 + ((1+(2*b^2))^(-p/2)))
hz
logHz <- log(hz)
wb <- (1 + b^2)*(1 + 3*b^2)
a <- 1 + 2*b^2
mu <- 1 - a^(- p/2)*(1 + p*b^2/a + (p*(p + 2)*(b^4))/(2*a^2)) #HZ mean
si2 <- 2*(1 + 4*b^2)^(- p/2) +
2*a^( - p)*(1 + (2*p*b^4)/a^2 +
(3*p*(p + 2)*b^8)/(4*a^4)) -
4*wb^( - p/2)*(1 + (3*p*b^4)/(2*wb) )                                                                                                 + (p*(p + 2)*b^8)/(2*wb^2)) #HZ variance
pmu <- log(sqrt(mu^4/(si2 + mu^2))) #lognormal HZ mean
psi <- sqrt(log((si2 + mu^2)/mu^2)) #lognormal HZ variance
P <- 1 - plnorm(hz,pmu,psi) #P-value associated to the HZ statistic
hz
P
data1 <- read.csv("../data/iris_virginica.csv", header=TRUE)
data <- (data1[,1:4])
n <- nrow(data)
p <- ncol(data)
S <- ((n-1)/n)*cov(data)
d <- as.matrix(data)
Y <- d%*%solve(S)%*%t(d)
I <- matrix(c(rep(1,n)),1,n)
A <- matrix(diag(t(Y)))%*%I
B <-  matrix(c(rep(1,n)),n,1)%*%diag(t(Y))
dif <- scale(data, scale = FALSE)
Dj <- diag(dif%*%solve(S)%*%t(dif))
Djk <- - 2*t(Y) + A + B
b <- 1/(sqrt(2))*((2*p + 1)/4)^(1/(p + 4))*(n^(1/(p + 4)))
a1 <- (sum(exp( - (b^2)/2 * Djk)))
b1 <- sum(exp( - ((b^2)/(2 * (1 + (b^2)))) * Dj))
hz <- n * (1/(n*n) * a1 - 2*((1+(b^2))^(-p/2)) * (1/n)* b1 + ((1+(2*b^2))^(-p/2)))
hz
a1
b1
a1
b1
a1 <- 122.579
b1 <- 19.052
hz <- n * (1/(n*n) * a1 - 2*((1+(b^2))^(-p/2)) * (1/n)* b1 + ((1+(2*b^2))^(-p/2)))
hz
b*b
logHz <- log(hz)
wb <- (1 + b^2)*(1 + 3*b^2)
a <- 1 + 2*b^2
mu <- 1 - a^(- p/2)*(1 + p*b^2/a + (p*(p + 2)*(b^4))/(2*a^2)) #HZ mean
si2 <- 2*(1 + 4*b^2)^(- p/2) +
2*a^( - p)*(1 + (2*p*b^4)/a^2 +
(3*p*(p + 2)*b^8)/(4*a^4)) -
4*wb^( - p/2)*(1 + (3*p*b^4)/(2*wb) )                                                                                                 + (p*(p + 2)*b^8)/(2*wb^2)) #HZ variance
pmu <- log(sqrt(mu^4/(si2 + mu^2))) #lognormal HZ mean
psi <- sqrt(log((si2 + mu^2)/mu^2)) #lognormal HZ variance
P <- 1 - plnorm(hz,pmu,psi) #P-value associated to the HZ statistic
P
plnorm(-0.3)
plnorm(-0.3)
llog(-0.3)
log(-0.3)
sum(Dj)
sum(Djk)
Dj
Djk
head(Djk)
Djk
diag(Djk)
d1 <- c(2.06133180060984, 0.898926649890006, 1.8675976088232014, -0.8446810761897462, 1.0926608416766443, -0.45721269261646774, 0.705192458103366, -2.0070862269095797, 1.2863950334632828, -1.4258836515496631, -1.8133520351229415, -0.06974430904318926, 0.1239898827434491, 0.3177240745300875, -0.6509468844031078, 1.480129225249923, -0.6509468844031078, -0.2634785008298294, 0.5114582663167275, -0.6509468844031078, -0.06974430904318926, 0.3177240745300875, 0.705192458103366, 0.3177240745300875, 0.898926649890006, 1.2863950334632828, 1.6738634170365612, 1.480129225249923, 0.1239898827434491, -0.45721269261646774, -0.8446810761897462, -0.8446810761897462, -0.2634785008298294, 0.1239898827434491, -1.0384152679763845, 0.1239898827434491, 1.480129225249923, 0.705192458103366, -0.6509468844031078, -0.8446810761897462, -0.8446810761897462, 0.3177240745300875, -0.2634785008298294, -1.8133520351229415, -0.6509468844031078, -0.45721269261646774, -0.45721269261646774, 0.5114582663167275, -1.619617843336303, -0.45721269261646774)
mean(d1)
sum(d1)
n1 <- length(d1)
total <- 0
for(i in 1:length(d1)) {
total <- total + d1[i]
}
total
sum(d1)
sum(d1*10)
n1 <- length(d1)
total <- 0
for(i in 1:length(d1)) {
total <- total + d1[i]*10
}
total
n1 <- length(d1)
total <- 0
for(i in 1:length(d1)) {
total <- total + d1[i]
}
total
sum(d1)
str(d1)
mean(d1)
total/n1
total2 <- Reduce("x",d1 )
total2 <- Reduce("+",d1 )
total2
total == total2
total2 <- Reduce("+",d1[1:49] )
(total2 <- Reduce("+",d1[1:49] ))
(sum(d1[1:49]))
as.double(d1)
sum(as.double(d1))
(total3 <- Reduce("+",d2))
d2 <- as.double(d1)
(total3 <- Reduce("+",d2))
sum(d2)
(total3 <- Reduce("+",d2[1:49]))
sum(d2[1:49])
(total3 <- Reduce("+",d2))
sum(d2)
d2[n]
d2[n1]
d1[n1]
summary(d1[n1])
(total3 <- Reduce("+",d2[1:49]))
sum(d2[1:49])
(Reduce("+",d2[1:49]) + d2[n1])
sum(d2[1:49]) + d2[n1]
d2[n1]
d2[n1])
d2[n1]
(Reduce("+",d2[1:49]) + d2[n1])
sum(d2[1:49]) + d2[n1]
sum(d2[1:49])
Reduce("+",d2[1:49])
(Reduce("+",d2[1:49]) + dtest)
sum(d2[1:49]) + dtest
dtest <- -0.457
(Reduce("+",d2[1:49]) + dtest)
sum(d2[1:49]) + dtest
dtest <- -0.457212692616467
(Reduce("+",d2[1:49]) + dtest)
sum(d2[1:49]) + dtest
dtest <- -0.45721269261646
(Reduce("+",d2[1:49]) + dtest)
sum(d2[1:49]) + dtest
dtest <- -0.4572126926164
(Reduce("+",d2[1:49]) + dtest)
sum(d2[1:49]) + dtest
dtest <- -0.457212692616
(Reduce("+",d2[1:49]) + dtest)
sum(d2[1:49]) + dtest
dtest <- -0.45721269261
(Reduce("+",d2[1:49]) + dtest)
sum(d2[1:49]) + dtest
dtest <- -0.4572126926
(Reduce("+",d2[1:49]) + dtest)
sum(d2[1:49]) + dtest
dtest <- -0.457212692
(Reduce("+",d2[1:49]) + dtest)
sum(d2[1:49]) + dtest
dtest <- -0.45721269
(Reduce("+",d2[1:49]) + dtest)
sum(d2[1:49]) + dtest
dtest <- -0.4572126
(Reduce("+",d2[1:49]) + dtest)
sum(d2[1:49]) + dtest
(Reduce("+",d2[1:49]) + d2[n1])
sum(d2[1:49]) + d2[n1]
is.double(d1)
