install.packages("rscala")
toTest <- c("R", "scala", "bash")
where <- Sys.which(toTest)
exists <- nchar(where) > 0 # TODO: Only run chunk if runtime exists
for(n in names(where)) {
path <- where[n]
if(nchar(path) <= 0) {
path <- "<not found>"
}
message("* __", n, "__: `", path, "`\n")
}
toTest <- c("R", "scala", "bash")
where <- Sys.which(toTest)
exists <- nchar(where) > 0 # TODO: Only run chunk if runtime exists
require(rscala)
require(rscala)
scala(classpath="target/au.id.cxd.math-assembly-1.0.jar")
s <- scala()
scalaInfo()
scala()
)
scala(debug=TRUE)
devtools::install_github("cran/jvmr")
# setup the jvmr interpreter
library(jvmr)
library(knitr)
scala <- scalaInterpreter()
knit_engines$set(scalar = function(options) {
code <- paste(options$code, collapse = "\n")
output <- capture.output(interpret(scala, code, echo.output = TRUE))
engine_output(options, options$code, output)
})
# setup the jvmr interpreter
library(jvmr)
library(knitr)
scala <- scalaInterpreter()
knit_engines$set(scala = function(options) {
code <- paste(options$code, collapse = "\n")
output <- capture.output(interpret(scala, code, echo.output = TRUE))
engine_output(options, options$code, output)
})
# setup the jvmr interpreter
library(jvmr)
library(knitr)
scala <- scalaInterpreter()
knit_engines$set(scalar = function(options) {
code <- paste(options$code, collapse = "\n")
output <- capture.output(interpret(scala, code, echo.output = TRUE))
engine_output(options, options$code, output)
})
# setup the jvmr interpreter
library(jvmr)
library(knitr)
scala <- scalaInterpreter()
knit_engines$set(scalainr = function(options) {
code <- paste(options$code, collapse = "\n")
output <- capture.output(interpret(scala, code, echo.output = TRUE))
engine_output(options, options$code, output)
})
# setup the jvmr interpreter
library(jvmr)
library(knitr)
scala <- scalaInterpreter()
knit_engines$set(scalainr = function(options) {
code <- paste(options$code, collapse = "\n")
output <- capture.output(interpret(scala, code, echo.output = TRUE))
engine_output(options, options$code, output)
})
getwd()
# setup the jvmr interpreter
library(rJava)
library(jvmr)
library(knitr)
cp <- getwd()
.jinit(list.files(file.path(cp, "target"), full.names=TRUE))
scala <- scalaInterpreter()
knit_engines$set(scalainr = function(options) {
code <- paste(options$code, collapse = "\n")
output <- capture.output(interpret(scala, code, echo.output = TRUE))
engine_output(options, options$code, output)
})
# setup the jvmr interpreter
library(rJava)
options(java.parameters = c("-Xmx1G", "-XX:MaxPermGen=1G"))
cp <- getwd()
.jinit(list.files(file.path(cp, "target"), full.names=TRUE))
library(jvmr)
library(knitr)
scala <- scalaInterpreter()
knit_engines$set(scalainr = function(options) {
code <- paste(options$code, collapse = "\n")
output <- capture.output(interpret(scala, code, echo.output = TRUE))
engine_output(options, options$code, output)
})
getOption("jvmr.class.path")
list.files(file.path(cp, "target"), full.names=TRUE)
cp <- getwd()
list.files(file.path(cp, "target"), full.names=TRUE))
list.files(file.path(cp, "target"), full.names=TRUE)
includes <- list.files(file.path(cp, "target"), full.names=TRUE)
scalaInterpreter(includes)
# setup the jvmr interpreter
library(rJava)
options(java.parameters = c("-Xmx1G", "-XX:MaxPermGen=1G"))
cp <- getwd()
includes <- list.files(file.path(cp, "target"), full.names=TRUE)
library(jvmr)
library(knitr)
scala <- scalaInterpreter(includes)
# setup the jvmr interpreter
library(rJava)
options(java.parameters = c("-Xmx1G", "-XX:MaxPermGen=1G"))
cp <- getwd()
includes <- list.files(file.path(cp, "target"), full.names=TRUE)
library(jvmr)
library(knitr)
scala <- scalaInterpreter(includes)
!is.null(includes)
c(includes)
includes
cp <- getwd()
includes <- list.files(file.path(cp, "target"), full.names=TRUE)
includes
cp
cp <- getwd()
includes <- list.files(file.path(cp, "../target"), full.names=TRUE)
includes
# setup the jvmr interpreter
library(rJava)
options(java.parameters = c("-Xmx1G", "-XX:MaxPermGen=1G"))
cp <- getwd()
includes <- list.files(file.path(cp, "../target"), full.names=TRUE)
library(jvmr)
library(knitr)
scala <- scalaInterpreter(includes)
knit_engines$set(scalainr = function(options) {
code <- paste(options$code, collapse = "\n")
output <- capture.output(interpret(scala, code, echo.output = TRUE))
engine_output(options, options$code, output)
})
require(MVN)
require(MVN)
# setup the jvmr interpreter
library(rJava)
options(java.parameters = c("-Xmx1G", "-XX:MaxPermGen=1G"))
cp <- getwd()
includes <- list.files(file.path(cp, "../target"), full.names=TRUE)
library(jvmr)
library(knitr)
scala <- scalaInterpreter(includes)
knit_engines$set(scalainr = function(options) {
code <- paste(options$code, collapse = "\n")
output <- capture.output(interpret(scala, code, echo.output = TRUE))
engine_output(options, options$code, output)
})
print(.jclassPath())
install.packages("rJava")
require(rJava)
x <- scala["x"]
# set the JVM
Sys.setenv(JAVA_HOME = '/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/')
Sys.setenv(LD_LIBRARY_PATH = '$LD_LIBRARY_PATH:$JAVA_HOME/lib')
# setup the jvmr interpreter
library(rJava)
options(java.parameters = c("-Xmx1G", "-XX:MaxPermGen=1G"))
cp <- getwd()
includes <- list.files(file.path(cp, "../target"), full.names=TRUE)
library(jvmr)
library(knitr)
scala <- scalaInterpreter(includes)
knit_engines$set(scalainr = function(options) {
code <- paste(options$code, collapse = "\n")
output <- capture.output(interpret(scala, code, echo.output = TRUE))
engine_output(options, options$code, output)
})
x <- scala["x"]
x <- scala["x"]
quantiles <- scala["quantiles"]
distances <- scala["distSorted"]
plot(x, quantiles, type="l")
x <- seq(from=0.1, to=1.0, by=0.1)
qchisq(x,2.0)
plot(x,quantiles)
q <- qchisq(x,2.0)
plot(x,q)
plot(x,q, type="l")
data <- iris[iris$Species=="virginica",]
data <- data[,1:4]
data <- iris[iris$Species=="virginica",]
data <- data[,1:4]
dist <- mahalanobis(data, colMeans(data), cov(data))
dist
data <- iris[iris$Species=="virginica",]
data <- scale(data[,1:4])
dist <- mahalanobis(data, colMeans(data), cov(data))
dist
(u <- ((1:n)-0.5)/n)
n <- length(dist)
(u <- ((1:n)-0.5)/n)
plot(sort(dist),u)
data <- iris[iris$Species=="virginica",]
data <- scale(data[,1:4])
dist <- mahalanobis(data, colMeans(data), cov(data))
n <- length(dist)
(u <- ((1:n)-0.5)/n)
p <- qchisq(u,2)
plot(sort(dist),u)
abline(0,1)
require(MVN)
mardiaTest(data, qqplot=TRUE)
plot(distances^2, quantiles, col="blue")
plot(distances.^2, quantiles, col="blue")
distances <- sapply(distances, function(d) d^2)
distsorted <- sort(dist)
distsorted <- sapply(distsorted, function(d) d^2)
plot(distsorted,u)
abline(0,1)
require(MVN)
mardiaTest(data, qqplot=TRUE)
data <- iris[iris$Species=="virginica",]
data <- scale(data[,1:4])
dist <- mahalanobis(data, colMeans(data), cov(data))
n <- length(dist)
u <- ((1:n)-0.5)/n
p <- qchisq(u,2)
distsorted <- sort(dist)
distsorted <- sapply(distsorted, function(d) d^2)
plot(distsorted,u)
abline(0,1)
require(MVN)
mardiaTest(data, qqplot=TRUE)
data <- iris[iris$Species=="virginica",]
data <- scale(data[,1:4])
dist <- mahalanobis(data, colMeans(data), cov(data))
n <- length(dist)
u <- ((1:n)-0.5)/n
p <- qchisq(u,2)
distsorted <- sort(dist)
plot(distsorted,u)
abline(0,1)
require(MVN)
mardiaTest(data, qqplot=TRUE)
data <- iris[iris$Species=="virginica",]
data <- scale(data[,1:4])
dist <- mahalanobis(data, colMeans(data), cov(data))
n <- length(dist)
u <- ((1:n)-0.5)/n
p <- qchisq(u,2)
distsorted <- sort(dist)
plot(distsorted,p)
abline(0,1)
require(MVN)
mardiaTest(data, qqplot=TRUE)
dist <- mahalanobis(data)
dist <- mahalanobis(data, FALSE, cov(data))
data <- iris[iris$Species=="virginica",]
data <- scale(data[,1:4])
dist <- mahalanobis(data, FALSE, cov(data))
n <- length(dist)
u <- ((1:n)-0.5)/n
p <- qchisq(u,2)
distsorted <- sort(dist)
plot(distsorted,p)
abline(0,1)
require(MVN)
mardiaTest(data, qqplot=TRUE)
cov(data)
data
cov(data)
solve(cov(data))
cov(data)
colMeans(data)
data
dim(data)
colMeans(data)
data
head(data_)
head(data)
colMeans(data)
data[,1]
iris[,1]
iris[,2]
iris[,3]
iris[,4]
data2 <- iris[iris$Species=="virginica"]
data2 <- iris[iris$Species=="virginica",]
data2[,1]
data2[,2]
data2[,3]
data2[,4]
data2[,5]
data2
data <- csv.read("iris_virginica.csv", header=TRUE)
data <- csv.read("../data/iris_virginica.csv", header=TRUE)
data <- read.csv("../data/iris_virginica.csv", header=TRUE)
data <- scale(data[,1:4])
dist <- mahalanobis(data, colMeans(data), cov(data))
n <- length(dist)
u <- ((1:n)-0.5)/n
p <- qchisq(u,2)
distsorted <- sort(dist)
plot(distsorted,p)
abline(0,1)
require(MVN)
mardiaTest(data, qqplot=TRUE)
data[,1]
data1 <- read.csv("../data/iris_virginica.csv", header=TRUE)
data <- scale(data1[,1:4])
dist <- mahalanobis(data, colMeans(data), cov(data))
n <- length(dist)
u <- ((1:n)-0.5)/n
p <- qchisq(u,2)
distsorted <- sort(dist)
plot(distsorted,p)
abline(0,1)
require(MVN)
mardiaTest(data, qqplot=TRUE)
data1[,1]
cov(data1)
cov(data)
colMeans(data)
colMeans(data1)
data
colMeans(data)
mahalanobis(data)
mahalanobis(data, colMeans(data), cov(data))
sqrt(mahalanobis(data, colMeans(data), cov(data)))
colMeans(data)
data[,1]
mean(data[,1])
sum(data[,1])
sum(data[,1])/50
colMeans(data)
rowSums(data)
colSums(data)
data[,1]
colSums(data)/length(data)
data1 <- read.csv("../data/iris_virginica.csv", header=TRUE)
data <- scale(data1[,1:4])
mu <- colSums(data)/length(data)
dist <- mahalanobis(data, mu, cov(data))
n <- length(dist)
u <- ((1:n)-0.5)/n
p <- qchisq(u,2)
distsorted <- sort(dist)
plot(distsorted,p)
abline(0,1)
require(MVN)
mardiaTest(data, qqplot=TRUE)
mu
data1 <- read.csv("../data/iris_virginica.csv", header=TRUE)
data <- scale(data1[,1:4])
mu <- colSums(data)/length(data)
sigma <- cov(data)
dist <- mahalanobis(data, mu, sigma)
n <- length(dist)
u <- ((1:n)-0.5)/n
p <- qchisq(u,2)
distsorted <- sort(dist)
plot(distsorted,p)
abline(0,1)
require(MVN)
mardiaTest(data, qqplot=TRUE)
mu
sigma
mean(data[,1])
sum(data[,1])
sum(data[,1]) * 1/50
sum(data[,1])/50
colSums(data)
colSums(data)
colSums(data[,1])
colSums(data[,1:2])
sum(data[,1])
sum(data[,2])
sum(data[,1])
colSums(data)
sum(data[,1])/length(data)
length(data)
sum(data[,1])/nrow(data)
colSums(data)
colMeans(data)
d1 <- c(2.06133180060984, 0.898926649890006, 1.8675976088232014, -0.8446810761897462, 1.0926608416766443, -0.45721269261646774, 0.705192458103366, -2.0070862269095797, 1.2863950334632828, -1.4258836515496631, -1.8133520351229415, -0.06974430904318926, 0.1239898827434491, 0.3177240745300875, -0.6509468844031078, 1.480129225249923, -0.6509468844031078, -0.2634785008298294, 0.5114582663167275, -0.6509468844031078, -0.06974430904318926, 0.3177240745300875, 0.705192458103366, 0.3177240745300875, 0.898926649890006, 1.2863950334632828, 1.6738634170365612, 1.480129225249923, 0.1239898827434491, -0.45721269261646774, -0.8446810761897462, -0.8446810761897462, -0.2634785008298294, 0.1239898827434491, -1.0384152679763845, 0.1239898827434491, 1.480129225249923, 0.705192458103366, -0.6509468844031078, -0.8446810761897462, -0.8446810761897462, 0.3177240745300875, -0.2634785008298294, -1.8133520351229415, -0.6509468844031078, -0.45721269261646774, -0.45721269261646774, 0.5114582663167275, -1.619617843336303, -0.45721269261646774)
mean(d1)
sum(d1)/length(d1)
d1 <- c(2.06133180060984, 0.898926649890006, 1.8675976088232014, -0.8446810761897462, 1.0926608416766443, -0.45721269261646774, 0.705192458103366, -2.0070862269095797, 1.2863950334632828, -1.4258836515496631, -1.8133520351229415, -0.06974430904318926, 0.1239898827434491, 0.3177240745300875, -0.6509468844031078, 1.480129225249923, -0.6509468844031078, -0.2634785008298294, 0.5114582663167275, -0.6509468844031078, -0.06974430904318926, 0.3177240745300875, 0.705192458103366, 0.3177240745300875, 0.898926649890006, 1.2863950334632828, 1.6738634170365612, 1.480129225249923, 0.1239898827434491, -0.45721269261646774, -0.8446810761897462, -0.8446810761897462, -0.2634785008298294, 0.1239898827434491, -1.0384152679763845, 0.1239898827434491, 1.480129225249923, 0.705192458103366, -0.6509468844031078, -0.8446810761897462, -0.8446810761897462, 0.3177240745300875, -0.2634785008298294, -1.8133520351229415, -0.6509468844031078, -0.45721269261646774, -0.45721269261646774, 0.5114582663167275, -1.619617843336303, -0.45721269261646774)
mean(d1)
sum(d1)
d1 <- c(2.06133180060984, 0.898926649890006, 1.8675976088232014, -0.8446810761897462, 1.0926608416766443, -0.45721269261646774, 0.705192458103366, -2.0070862269095797, 1.2863950334632828, -1.4258836515496631, -1.8133520351229415, -0.06974430904318926, 0.1239898827434491, 0.3177240745300875, -0.6509468844031078, 1.480129225249923, -0.6509468844031078, -0.2634785008298294, 0.5114582663167275, -0.6509468844031078, -0.06974430904318926, 0.3177240745300875, 0.705192458103366, 0.3177240745300875, 0.898926649890006, 1.2863950334632828, 1.6738634170365612, 1.480129225249923, 0.1239898827434491, -0.45721269261646774, -0.8446810761897462, -0.8446810761897462, -0.2634785008298294, 0.1239898827434491, -1.0384152679763845, 0.1239898827434491, 1.480129225249923, 0.705192458103366, -0.6509468844031078, -0.8446810761897462, -0.8446810761897462, 0.3177240745300875, -0.2634785008298294, -1.8133520351229415, -0.6509468844031078, -0.45721269261646774, -0.45721269261646774, 0.5114582663167275, -1.619617843336303, -0.45721269261646774)
mean(d1)
sum(d1)/50
d1 <- c(2.06133180060984, 0.898926649890006, 1.8675976088232014, -0.8446810761897462, 1.0926608416766443, -0.45721269261646774, 0.705192458103366, -2.0070862269095797, 1.2863950334632828, -1.4258836515496631, -1.8133520351229415, -0.06974430904318926, 0.1239898827434491, 0.3177240745300875, -0.6509468844031078, 1.480129225249923, -0.6509468844031078, -0.2634785008298294, 0.5114582663167275, -0.6509468844031078, -0.06974430904318926, 0.3177240745300875, 0.705192458103366, 0.3177240745300875, 0.898926649890006, 1.2863950334632828, 1.6738634170365612, 1.480129225249923, 0.1239898827434491, -0.45721269261646774, -0.8446810761897462, -0.8446810761897462, -0.2634785008298294, 0.1239898827434491, -1.0384152679763845, 0.1239898827434491, 1.480129225249923, 0.705192458103366, -0.6509468844031078, -0.8446810761897462, -0.8446810761897462, 0.3177240745300875, -0.2634785008298294, -1.8133520351229415, -0.6509468844031078, -0.45721269261646774, -0.45721269261646774, 0.5114582663167275, -1.619617843336303, -0.45721269261646774)
mean(d1)
sum(d1)
d1 <- c(2.06133180060984, 0.898926649890006, 1.8675976088232014, -0.8446810761897462, 1.0926608416766443, -0.45721269261646774, 0.705192458103366, -2.0070862269095797, 1.2863950334632828, -1.4258836515496631, -1.8133520351229415, -0.06974430904318926, 0.1239898827434491, 0.3177240745300875, -0.6509468844031078, 1.480129225249923, -0.6509468844031078, -0.2634785008298294, 0.5114582663167275, -0.6509468844031078, -0.06974430904318926, 0.3177240745300875, 0.705192458103366, 0.3177240745300875, 0.898926649890006, 1.2863950334632828, 1.6738634170365612, 1.480129225249923, 0.1239898827434491, -0.45721269261646774, -0.8446810761897462, -0.8446810761897462, -0.2634785008298294, 0.1239898827434491, -1.0384152679763845, 0.1239898827434491, 1.480129225249923, 0.705192458103366, -0.6509468844031078, -0.8446810761897462, -0.8446810761897462, 0.3177240745300875, -0.2634785008298294, -1.8133520351229415, -0.6509468844031078, -0.45721269261646774, -0.45721269261646774, 0.5114582663167275, -1.619617843336303, -0.45721269261646774)
mean(d1)
sum(d1)
total <- 0
for(i in 1:length(d1)) {
total <- total + d1[i]
}
total
sum
d1 <- c(2.06133180060984, 0.898926649890006, 1.8675976088232014, -0.8446810761897462, 1.0926608416766443, -0.45721269261646774, 0.705192458103366, -2.0070862269095797, 1.2863950334632828, -1.4258836515496631, -1.8133520351229415, -0.06974430904318926, 0.1239898827434491, 0.3177240745300875, -0.6509468844031078, 1.480129225249923, -0.6509468844031078, -0.2634785008298294, 0.5114582663167275, -0.6509468844031078, -0.06974430904318926, 0.3177240745300875, 0.705192458103366, 0.3177240745300875, 0.898926649890006, 1.2863950334632828, 1.6738634170365612, 1.480129225249923, 0.1239898827434491, -0.45721269261646774, -0.8446810761897462, -0.8446810761897462, -0.2634785008298294, 0.1239898827434491, -1.0384152679763845, 0.1239898827434491, 1.480129225249923, 0.705192458103366, -0.6509468844031078, -0.8446810761897462, -0.8446810761897462, 0.3177240745300875, -0.2634785008298294, -1.8133520351229415, -0.6509468844031078, -0.45721269261646774, -0.45721269261646774, 0.5114582663167275, -1.619617843336303, -0.45721269261646774)
mean(d1)
sum(d1)
n1 <- length(d1)
total <- 0
for(i in 1:length(d1)) {
total <- total + d1[i]/n1
}
total
d1 <- c(2.06133180060984, 0.898926649890006, 1.8675976088232014, -0.8446810761897462, 1.0926608416766443, -0.45721269261646774, 0.705192458103366, -2.0070862269095797, 1.2863950334632828, -1.4258836515496631, -1.8133520351229415, -0.06974430904318926, 0.1239898827434491, 0.3177240745300875, -0.6509468844031078, 1.480129225249923, -0.6509468844031078, -0.2634785008298294, 0.5114582663167275, -0.6509468844031078, -0.06974430904318926, 0.3177240745300875, 0.705192458103366, 0.3177240745300875, 0.898926649890006, 1.2863950334632828, 1.6738634170365612, 1.480129225249923, 0.1239898827434491, -0.45721269261646774, -0.8446810761897462, -0.8446810761897462, -0.2634785008298294, 0.1239898827434491, -1.0384152679763845, 0.1239898827434491, 1.480129225249923, 0.705192458103366, -0.6509468844031078, -0.8446810761897462, -0.8446810761897462, 0.3177240745300875, -0.2634785008298294, -1.8133520351229415, -0.6509468844031078, -0.45721269261646774, -0.45721269261646774, 0.5114582663167275, -1.619617843336303, -0.45721269261646774)
mean(d1)
sum(d1)
n1 <- length(d1)
total <- 0
for(i in 1:length(d1)) {
total <- total + d1[i]
}
total
total/n1
d1 <- c(2.06133180060984, 0.898926649890006, 1.8675976088232014, -0.8446810761897462, 1.0926608416766443, -0.45721269261646774, 0.705192458103366, -2.0070862269095797, 1.2863950334632828, -1.4258836515496631, -1.8133520351229415, -0.06974430904318926, 0.1239898827434491, 0.3177240745300875, -0.6509468844031078, 1.480129225249923, -0.6509468844031078, -0.2634785008298294, 0.5114582663167275, -0.6509468844031078, -0.06974430904318926, 0.3177240745300875, 0.705192458103366, 0.3177240745300875, 0.898926649890006, 1.2863950334632828, 1.6738634170365612, 1.480129225249923, 0.1239898827434491, -0.45721269261646774, -0.8446810761897462, -0.8446810761897462, -0.2634785008298294, 0.1239898827434491, -1.0384152679763845, 0.1239898827434491, 1.480129225249923, 0.705192458103366, -0.6509468844031078, -0.8446810761897462, -0.8446810761897462, 0.3177240745300875, -0.2634785008298294, -1.8133520351229415, -0.6509468844031078, -0.45721269261646774, -0.45721269261646774, 0.5114582663167275, -1.619617843336303, -0.45721269261646774)
mean(d1)
sum(d1)
n1 <- length(d1)
total <- 0
for(i in 1:length(d1)) {
total <- total + d1[i]
}
total
total/n1
debugSource('~/Projects/scala/scala-au.id.cxd.math-gh-pages/scala-au.id.cxd.math/notes/debug.R', echo=TRUE)
sum(d1)
debugSource('~/Projects/scala/scala-au.id.cxd.math-gh-pages/scala-au.id.cxd.math/notes/debug.R', echo=TRUE)
debugSource('~/Projects/scala/scala-au.id.cxd.math-gh-pages/scala-au.id.cxd.math/notes/debug.R', echo=TRUE)
# why is sum different to total?
sum(d1)
d1 <- c(2.06133180060984, 0.898926649890006, 1.8675976088232014, -0.8446810761897462, 1.0926608416766443, -0.45721269261646774, 0.705192458103366, -2.0070862269095797, 1.2863950334632828, -1.4258836515496631, -1.8133520351229415, -0.06974430904318926, 0.1239898827434491, 0.3177240745300875, -0.6509468844031078, 1.480129225249923, -0.6509468844031078, -0.2634785008298294, 0.5114582663167275, -0.6509468844031078, -0.06974430904318926, 0.3177240745300875, 0.705192458103366, 0.3177240745300875, 0.898926649890006, 1.2863950334632828, 1.6738634170365612, 1.480129225249923, 0.1239898827434491, -0.45721269261646774, -0.8446810761897462, -0.8446810761897462, -0.2634785008298294, 0.1239898827434491, -1.0384152679763845, 0.1239898827434491, 1.480129225249923, 0.705192458103366, -0.6509468844031078, -0.8446810761897462, -0.8446810761897462, 0.3177240745300875, -0.2634785008298294, -1.8133520351229415, -0.6509468844031078, -0.45721269261646774, -0.45721269261646774, 0.5114582663167275, -1.619617843336303, -0.45721269261646774)
mean(d1)
sum(d1)
n1 <- length(d1)
total <- 0
for(i in 1:length(d1)) {
total <- total + d1[i]
}
total
# why is sum different to total?
sum(d1)
