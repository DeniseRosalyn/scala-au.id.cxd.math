C=c(0, 0, 0, 200, 0, 0, 0, 0),
D=c(0, 0, 0, 0, 80, 0, 0, 90),
E=c(0, 0, 0, 0, 0, 50, 150, 30),
F=c(0, 0, 0, 0, 0, 0, 70, 0),
G=c(0, 0, 0, 0, 0, 0, 0, 70),
H=c(0, 0, 0, 0, 0, 0, 0, 0)
)))
col.names(weights) <- nodes
adj
(out1 <- t(adj)%*%adj)
(out2 <- t(out1)%*%(adj))
(out3 <- t(out2)%*%(adj))
nodes <- c("A","B","C","D","E","F","G","H")
adj <- t(as.matrix(data.frame(
A=c(0, 1, 1, 0, 0, 0, 0, 0),
B=c(0, 0, 0, 0, 0, 1, 0, 0),
C=c(0, 0, 0, 1, 0, 0, 0, 0),
D=c(0, 0, 0, 0, 1, 0, 0, 1),
E=c(0, 0, 0, 0, 0, 1, 1, 1),
F=c(0, 0, 0, 0, 0, 0, 1, 0),
G=c(0, 0, 0, 0, 0, 0, 0, 1),
H=c(0, 0, 0, 0, 0, 0, 0, 0)
)))
colnames(adj) <- nodes
weights <- t(as.matrix(data.frame(
A=c(0, 100, 30, 0, 0, 0, 0, 0),
B=c(0, 0, 0, 0, 0, 300, 0, 0),
C=c(0, 0, 0, 200, 0, 0, 0, 0),
D=c(0, 0, 0, 0, 80, 0, 0, 90),
E=c(0, 0, 0, 0, 0, 50, 150, 30),
F=c(0, 0, 0, 0, 0, 0, 70, 0),
G=c(0, 0, 0, 0, 0, 0, 0, 70),
H=c(0, 0, 0, 0, 0, 0, 0, 0)
)))
colnames(weights) <- nodes
adj
(out1 <- t(adj)%*%adj)
(out2 <- t(out1)%*%(adj))
(out3 <- t(out2)%*%(adj))
(out4 <- t(out3)%*%(adj))
(out5 <- t(out4)%*%(adj))
(out6 <- t(out5)%*%(adj))
(out7 <- t(out6)%*%(adj))
(out8 <- t(out7)%*%(adj))
(out9 <- t(out9)%*%(adj))
(out9 <- t(out8)%*%(adj))
(out10 <- t(out10)%*%(adj))
(out10 <- t(out9)%*%(adj))
(out11 <- t(out10)%*%(adj))
# set the JVM
Sys.setenv(JAVA_HOME = '/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/')
Sys.setenv(LD_LIBRARY_PATH = '$LD_LIBRARY_PATH:$JAVA_HOME/lib')
# setup the jvmr interpreter
library(rJava)
options(java.parameters = c("-Xmx1G", "-XX:MaxPermGen=1G"))
cp <- getwd()
includes <- list.files(file.path(cp, "../target"), full.names=TRUE)
library(jvmr)
install.packages("jvmr")
names(knitr::knit_engines$get())
```{r, engine='scala', message=FALSE, results='hide'}
// imports
import java.io.File
import scala.collection.mutable
import au.id.cxd.math.data.CsvReader
import au.id.cxd.math.data.MatrixReader
import au.id.cxd.math.function.transform.StandardisedNormalisation
import au.id.cxd.math.probability.analysis._
import breeze.linalg.{DenseMatrix, eigSym, inv, svd}
import au.id.cxd.math.function.distance.MahalanobisDistance
import au.id.cxd.math.probability.continuous.ChiSquare
val fileName:String = "/Users/cd/Projects/scala/scala-au.id.cxd.math-gh-pages/scala-au.id.cxd.math/data/iris_virginica.csv"
val mat = MatrixReader.readFileAt(fileName)
// extract the columns of interest.
val data = mat(::, 0 to 3)
```
```{scala, message=FALSE, results='hide'}
// imports
import java.io.File
import scala.collection.mutable
import au.id.cxd.math.data.CsvReader
import au.id.cxd.math.data.MatrixReader
import au.id.cxd.math.function.transform.StandardisedNormalisation
import au.id.cxd.math.probability.analysis._
import breeze.linalg.{DenseMatrix, eigSym, inv, svd}
import au.id.cxd.math.function.distance.MahalanobisDistance
import au.id.cxd.math.probability.continuous.ChiSquare
val fileName:String = "/Users/cd/Projects/scala/scala-au.id.cxd.math-gh-pages/scala-au.id.cxd.math/data/iris_virginica.csv"
val mat = MatrixReader.readFileAt(fileName)
// extract the columns of interest.
val data = mat(::, 0 to 3)
```
knitr::opts_chunk$set(echo = TRUE)
require(devtools)
install_github("cran/jvmr")
install.packages("rJava")
install.packages("rJava")
require(rJava)
install_github("cran/jvmr")
devtools::install_github("cran/jvmr")
scala --help
devtools::install_github("cran/jvmr")
require(jvmr)
devtools::install_url("https://cran.r-project.org/src/contrib/Archive/jvmr/jvmr_2.11.2.1.tar.gz")
knitr::opts_chunk$set(echo = TRUE)
library(rscala)
library(knitr)
# ... args passed to rscala::scala functions. See ?rscala::scala for more informations.
make_scala_engine <- function(...) {
cp <- getwd()
conf <- scalaConfig()
conf$scalaHome <- "/usr/local/Cellar/scala@2.11/2.11.12/libexec"
conf$scalaCmd <- paste0(conf$scalaHome,"/bin/scala")
conf$scalaMajorVersion <- "2.11"
conf$javaHome <- "/Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/Home"
conf$javaCmd <- paste0(conf$javaHome, "Contents/Home/bin/java")
conf$javaMajorVersion <- "1.8"
includes <- list.files(file.path(cp, "../target"), full.names=TRUE)
engine <- rscala::scala(serialize.output = TRUE, stdout = TRUE, stderr=TRUE, JARs=includes)
engine <- force(engine)
function(options) {
code <- paste(options$code, collapse = "\n")
output <- capture.output(invisible(engine + code))
engine_output(options, options$code, output)
}
}
# Register new engine in knitr
knit_engines$set(scala = make_scala_engine())
scalaConfig()
library(rscala)
library(knitr)
# ... args passed to rscala::scala functions. See ?rscala::scala for more informations.
make_scala_engine <- function(...) {
cp <- getwd()
conf <- scalaConfig()
includes <- list.files(file.path(cp, "../target"), full.names=TRUE)
engine <- rscala::scala(serialize.output = TRUE, stdout = TRUE, stderr=TRUE, JARs=includes)
engine <- force(engine)
function(options) {
code <- paste(options$code, collapse = "\n")
output <- capture.output(invisible(engine + code))
engine_output(options, options$code, output)
}
}
# Register new engine in knitr
knit_engines$set(scala = make_scala_engine())
# set the JVM
Sys.setenv(JAVA_HOME = '/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/')
Sys.setenv(LD_LIBRARY_PATH = '$LD_LIBRARY_PATH:$JAVA_HOME/lib')
# setup the jvmr interpreter
library(rJava)
options(java.parameters = c("-Xmx1G", "-XX:MaxPermGen=1G"))
cp <- getwd()
includes <- list.files(file.path(cp, "../target"), full.names=TRUE)
library(jvmr)
devtools::install_github("cran/jvmr")
install.packages("rJava")
install.packages("rJava")
devtools::install_packages("rJava")
devtools::install_github("cran/rJava")
devtools::install_url("https://cran.rstudio.com/bin/macosx/el-capitan/contrib/3.5/rJava_0.9-8.tgz")
devtools::install_url("https://cran.rstudio.com/bin/macosx/el-capitan/contrib/3.5/rJava_0.9-9.tgz")
javareconfig
devtools::install_github("cran/rJava")
install.packages("rJava")
require(rJava)
J("java.lang.Double")$parseDouble("10.2")
.jinit()
J("java.lang.Double")$parseDouble("10.2")
J("System")$getProperty("java.version")
J("java.lang.System")$getProperty("java.version")
install.packages("jvmr")
devtools::install_github("cran/jvmr")
devtools::install_github("cran/jvmr")
devtools::install_github("cran/jvmr")
# set the JVM
Sys.setenv(JAVA_HOME = '/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/')
Sys.setenv(LD_LIBRARY_PATH = '$LD_LIBRARY_PATH:$JAVA_HOME/lib')
library(rscala)
library(knitr)
# ... args passed to rscala::scala functions. See ?rscala::scala for more informations.
make_scala_engine <- function(...) {
cp <- getwd()
includes <- list.files(file.path(cp, "../target"), full.names=TRUE)
engine <- rscala::scala(serialize.output = TRUE, stdout = "", JARs=includes, ...)
engine <- force(engine)
function(options) {
code <- paste(options$code, collapse = "\n")
output <- capture.output(invisible(engine + code))
engine_output(options, options$code, output)
}
}
# Register new engine in knitr
knit_engines$set(scala = make_scala_engine())
d1 <- c(2.06133180060984, 0.898926649890006,
1.8675976088232014,
-0.8446810761897462,
1.0926608416766443,
-0.45721269261646774,
0.705192458103366,
-2.0070862269095797,
1.2863950334632828,
-1.4258836515496631,
-1.8133520351229415,
-0.06974430904318926,
0.1239898827434491,
0.3177240745300875,
-0.6509468844031078,
1.480129225249923,
-0.6509468844031078,
-0.2634785008298294,
0.5114582663167275,
-0.6509468844031078,
-0.06974430904318926,
0.3177240745300875, 0.705192458103366, 0.3177240745300875, 0.898926649890006, 1.2863950334632828, 1.6738634170365612, 1.480129225249923, 0.1239898827434491, -0.45721269261646774, -0.8446810761897462, -0.8446810761897462, -0.2634785008298294, 0.1239898827434491, -1.0384152679763845, 0.1239898827434491, 1.480129225249923, 0.705192458103366, -0.6509468844031078, -0.8446810761897462, -0.8446810761897462, 0.3177240745300875, -0.2634785008298294, -1.8133520351229415, -0.6509468844031078, -0.45721269261646774, -0.45721269261646774, 0.5114582663167275,
-1.619617843336303,
-0.45721269261646774)
# set the JVM
Sys.setenv(JAVA_HOME = '/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/')
Sys.setenv(LD_LIBRARY_PATH = '$LD_LIBRARY_PATH:$JAVA_HOME/lib')
# setup the jvmr interpreter
library(rJava)
options(java.parameters = c("-Xmx1G", "-XX:MaxPermGen=1G"))
cp <- getwd()
includes <- list.files(file.path(cp, "../target"), full.names=TRUE)
library(jvmr)
library(knitr)
scala <- scalaInterpreter(includes)
knit_engines$set(scalainr = function(options) {
code <- paste(options$code, collapse = "\n")
output <- capture.output(interpret(scala, code, echo.output = TRUE))
engine_output(options, options$code, output)
})
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
library(rscala)
rscala::scalaConfig()
names(rscala::scalaVersionJARs())
library(rscala)
cp <- getwd()
includes <- list.files(file.path(cp, "../target/scala-2.12"), full.names=TRUE)
engine <- rscala::scala(serialize.output = TRUE, stdout = "", JARs=includes, ...)
engine <- scala(serialize.output = TRUE, stdout = "", JARs=includes, ...)
engine <- scala(serialize.output = TRUE, stdout = "", JARs=includes)
engine <- force(engine)
engine + 'import au.id.cxd.math.data.CsvReader'
cp <- getwd()
cp
x <- t(read.csv("temp/x.csv", header=FALSE))
cp <- getwd()
cp
x <- t(read.csv("../temp/x.csv", header=FALSE))
distances <- t(read.csv("../temp/distSorted.csv", header=FALSE))
quantiles <- t(read.csv("../temp/quantiles.csv", header=FALSE))
#x <- scala["x"]
#quantiles <- scala["quantiles"]
#distances <- scala["distSorted"]
distances <- sapply(distances, function(d) d^2)
m <- lm(quantiles ~ distances)
length(quantiles)
length(distances)
plot(quantiles ~ distances)
is.na(distances)
length(distances)
length(quantiles)
plot(quantiles)
quantiles
unlist(quantiles)
plot(unlist(quantiles))
nrow(quantiles)
c(quantiles)
x
cp <- getwd()
cp
x <- c(t(read.csv("../temp/x.csv", header=FALSE)))
distances <- c(t(read.csv("../temp/distSorted.csv", header=FALSE)))
quantiles <-c(t(read.csv("../temp/quantiles.csv", header=FALSE)))
cp <- getwd()
cp
x <- c(t(read.csv("../temp/x.csv", header=FALSE)))
distances <- c(t(read.csv("../temp/distSorted.csv", header=FALSE)))
quantiles <-c(t(read.csv("../temp/quantiles.csv", header=FALSE)))
#x <- scala["x"]
#quantiles <- scala["quantiles"]
#distances <- scala["distSorted"]
distances <- sapply(distances, function(d) d^2)
m <- lm(quantiles ~ distances)
intercept <- m$coefficients[1]
slope <- m$coefficients[2]
plot(distances, quantiles, col="blue", main="QQPlot of squared mahalanobis distance over Chisq Quantiles df=4")
abline(0,1, col="red")
x <- c(read.csv("../temp/x.csv", header=FALSE))
distances <- c(read.csv("../temp/distSorted.csv", header=FALSE))
quantiles <-c(read.csv("../temp/quantiles.csv", header=FALSE))
distances <- sapply(distances, function(d) d^2)
m <- lm(quantiles ~ distances)
x <- c(t(read.csv("../temp/x.csv", header=FALSE)))
distances <- c(t(read.csv("../temp/distSorted.csv", header=FALSE)))
quantiles <-c(t(read.csv("../temp/quantiles.csv", header=FALSE)))
distances <- sapply(distances, function(d) d^2)
m <- lm(quantiles ~ distances)
intercept <- m$coefficients[1]
slope <- m$coefficients[2]
plot(distances, quantiles, col="blue", main="QQPlot of squared mahalanobis distance over Chisq Quantiles df=4")
abline(0,1, col="red")
z <- as.matrix(read.csv("../temp/z.csv", header=FALSE))
varExplained <- c(t(read.csv("../temp/varianceExplained.csv", header=FALSE)))
correlation <-as.matrix(read.csv("../temp/correlation.csv", header=FALSE))
varExplained
correlation
z
z <- as.matrix(read.csv("../temp/z.csv", header=FALSE))
varExplained <- c(t(read.csv("../temp/varianceExplained.csv", header=FALSE)))
correlation <-as.matrix(read.csv("../temp/correlation.csv", header=FALSE))
yProjection <- as.matrix(read.csv("../temp/varianceExplained.csv", header=FALSE))
yNames <- c(t(read.csv("../temp/yNames.csv", header=FALSE)))
z <- as.matrix(read.csv("../temp/z.csv", header=FALSE))
varExplained <- c(t(read.csv("../temp/varianceExplained.csv", header=FALSE)))
correlation <-as.matrix(read.csv("../temp/correlation.csv", header=FALSE))
yProjection <- as.matrix(read.csv("../temp/varianceExplained.csv", header=FALSE))
yNames <- c(t(read.csv("../temp/yNames.csv", header=FALSE)))
functions <- 1:length(varExplained)
plot(varExplained ~ functions, type="b", ylab="percent of variation", xlab="canonical function")
#colnames(cor) <- c("Dyn.12.13", "Early.P", "Late.P", "Ptolemic", "Roman")
colnames(cor) <- c("Z1","Z2","Z3","Z4")
z <- as.matrix(read.csv("../temp/z.csv", header=FALSE))
varExplained <- c(t(read.csv("../temp/varianceExplained.csv", header=FALSE)))
cor <-as.matrix(read.csv("../temp/correlation.csv", header=FALSE))
yProjection <- as.matrix(read.csv("../temp/varianceExplained.csv", header=FALSE))
yNames <- c(t(read.csv("../temp/yNames.csv", header=FALSE)))
#colnames(cor) <- c("Dyn.12.13", "Early.P", "Late.P", "Ptolemic", "Roman")
colnames(cor) <- c("Z1","Z2","Z3","Z4")
rownames(cor) <- c("MB", "BH", "BL", "NH")
require(corrplot)
corrplot(cor)
install.packages("corrplot")
#colnames(cor) <- c("Dyn.12.13", "Early.P", "Late.P", "Ptolemic", "Roman")
colnames(cor) <- c("Z1","Z2","Z3","Z4")
rownames(cor) <- c("MB", "BH", "BL", "NH")
require(corrplot)
corrplot(cor)
zMat <- as.matrix(read.csv("../temp/z.csv", header=FALSE))
varExplained <- c(t(read.csv("../temp/varianceExplained.csv", header=FALSE)))
cor <-as.matrix(read.csv("../temp/correlation.csv", header=FALSE))
yProjection <- as.matrix(read.csv("../temp/varianceExplained.csv", header=FALSE))
yNames <- c(t(read.csv("../temp/yNames.csv", header=FALSE)))
eraNum <- 1:4
eraLabels <- c("Dyn.12.13","Early.P","Late.P","Ptolemic","Roman")
plot(zMat[,1],zMat[,2], type="n", xlab="Z2", ylab="Z1")
text(zMat[,1],zMat[,2], labels=eraLabels, col=eraNum, cex=0.6)
zMat <- as.matrix(read.csv("../temp/z.csv", header=FALSE))
varExplained <- c(t(read.csv("../temp/varianceExplained.csv", header=FALSE)))
cor <-as.matrix(read.csv("../temp/correlation.csv", header=FALSE))
yMat <- as.matrix(read.csv("../temp/varianceExplained.csv", header=FALSE))
yNames <- c(t(read.csv("../temp/yNames.csv", header=FALSE)))
plot(yMat[,1],yMat[,2], type="n", xlab="Z2", ylab="Z1")
yMat
zMat <- as.matrix(read.csv("../temp/z.csv", header=FALSE))
varExplained <- c(t(read.csv("../temp/varianceExplained.csv", header=FALSE)))
cor <-as.matrix(read.csv("../temp/correlation.csv", header=FALSE))
yProjection <- as.matrix(read.csv("../temp/yProjection.csv", header=FALSE))
yNames <- c(t(read.csv("../temp/yNames.csv", header=FALSE)))
plot(yMat[,1],yMat[,2], type="n", xlab="Z2", ylab="Z1")
zMat <- as.matrix(read.csv("../temp/z.csv", header=FALSE))
varExplained <- c(t(read.csv("../temp/varianceExplained.csv", header=FALSE)))
cor <-as.matrix(read.csv("../temp/correlation.csv", header=FALSE))
yMat <- as.matrix(read.csv("../temp/yProjection.csv", header=FALSE))
yNames <- c(t(read.csv("../temp/yNames.csv", header=FALSE)))
plot(yMat[,1],yMat[,2], type="n", xlab="Z2", ylab="Z1")
text(yMat[,1],yMat[,2], labels=yNames, col=as.numeric(as.factor(yNames)), cex=0.6)
yMat2 <- as.matrix(read.csv("../temp/testProjection2.csv", header=FALSE))
yNames2 <- c(t(read.csv("../temp/yNames2.csv", header=FALSE)))
eraLabels2 <- c(t(read.csv("../temp/eraLabels2.csv", header=FALSE)))
eraLabels3 <- c(t(read.csv("../temp/eraLabels3.csv", header=FALSE)))
plot(yMat2[,1],yMat2[,2], type="n", xlab="Z2", ylab="Z1")
text(yMat2[,1],yMat2[,2], labels=yNames2, col=as.numeric(as.factor(yNames2)), cex=0.6)
(m <- table(actualNames, yNames2))
actualNames <- eraLabels3
(m <- table(actualNames, yNames2))
total <- sum(m)
tp <- sum(diag(m))
fp <- total - tp
(percent <- tp/total)
(falsePc <- fp/total)
trainFile = "../data/egyption_skulls_train.csv"
testFile = "../data/egyption_skulls_test.csv"
train <- read.csv(trainFile, header=TRUE)
test <- read.csv(testFile, header=TRUE)
train$Period <- as.factor(eraLabels2)
test$Period <- as.factor(eraLabels3)
require(MASS)
model <- lda(Period~MB+BH+BL+NH, train)
pred <- predict(model, test)
(m <- table(test$Period, pred$class))
total <- sum(m)
tp <- sum(diag(m))
fp <- total - tp
(percent <- tp/total)
(falsePc <- fp/total)
par.old <- par(mfrow=c(1,2))
plot(yMat3[,1],yMat3[,2], type="n", xlab="Z2", ylab="Z1", main="Mandible actual class")
yMat3 <- as.matrix(read.csv("../temp/testProjection3.csv", header=FALSE))
yNames3 <- c(t(read.csv("../temp/yNames3.csv", header=FALSE)))
actualNames3 <- c(t(read.csv("../temp/groupNumTest.csv", header=FALSE)))
par.old <- par(mfrow=c(1,2))
plot(yMat3[,1],yMat3[,2], type="n", xlab="Z2", ylab="Z1", main="Mandible actual class")
text(yMat3[,1],yMat3[,2], labels=actualNames3, col=as.numeric(as.factor(actualNames3)), cex=0.6)
plot(yMat3[,1],yMat3[,2], type="n", xlab="Z2", ylab="Z1", main="Mandible predicted class")
text(yMat3[,1],yMat3[,2], labels=yNames3, col=as.numeric(as.factor(yNames3)), cex=0.6)
par(par.old)
(m <- table(actualNames3, yNames3))
total <- sum(m)
tp <- sum(diag(m))
fp <- total - tp
(percent <- tp/total)
(falsePc <- fp/total)
(m <- table(actualNames, yNames2))
total <- sum(m)
tp <- sum(diag(m))
fp <- total - tp
(percent <- tp/total)
(falsePc <- fp/total)
plot(yMat2[,1],yMat2[,2], type="n", xlab="Z2", ylab="Z1")
text(yMat2[,1],yMat2[,2], labels=yNames2, col=as.numeric(as.factor(yNames2)), cex=0.6)
(m <- table(actualNames, yNames2))
total <- sum(m)
tp <- sum(diag(m))
fp <- total - tp
(percent <- tp/total)
(falsePc <- fp/total)
(m <- table(actualNames3, yNames2))
(m <- table(actualNames, yNames2))
total <- sum(m)
tp <- sum(diag(m))
fp <- total - tp
(percent <- tp/total)
(falsePc <- fp/total)
yNames2
actualNames
test
names(test)
actualNames <- test$Period
(m <- table(actualNames, yNames2))
total <- sum(m)
tp <- sum(diag(m))
fp <- total - tp
(percent <- tp/total)
(falsePc <- fp/total)
yMat2 <- as.matrix(read.csv("../temp/testProjection4.csv", header=FALSE))
yNames2 <- c(t(read.csv("../temp/yNames4.csv", header=FALSE)))
yMat4 <- as.matrix(read.csv("../temp/testProjection4.csv", header=FALSE))
yNames4 <- c(t(read.csv("../temp/yNames4.csv", header=FALSE)))
plot(yMat4[,1],yMat4[,2], type="n", xlab="Z2", ylab="Z1")
text(yMat4[,1],yMat4[,2], labels=yNames4, col=as.numeric(as.factor(yNames4)), cex=0.6)
(m <- table(actualNames, yNames4))
total <- sum(m)
tp <- sum(diag(m))
fp <- total - tp
(percent <- tp/total)
(falsePc <- fp/total)
groupNumTest
require(MVN)
require(MVN)
mardiaTest(data, qqplot=TRUE)
data
data1
data1 <- read.csv("../data/iris_virginica.csv", header=TRUE)
data <- (data1[,1:4])
mu <- colMeans(data)
sigma <- cov(data)
dist <- mahalanobis(data, mu, sigma)
df <- ncol(data)
n <- length(dist)
u <- ((1:n)-0.5)/n
p <- qchisq(u,df)
distsorted <- sort(dist)
plot(distsorted,p,
col="blue",
main="QQ Plot of mahalnobis distance v chisq quantiles")
abline(0,1, col="red")
require(MVN)
mardiaTest(data, qqplot=TRUE)
mardiaTest(data, qqplot=TRUE)
require(MVN)
mvn(data, test="mardia", qqplot=TRUE)
require(MVN)
mvn(data, mvnTest="mardia", qqplot=TRUE)
require(MVN)
mvn(data, mvnTest="mardia", univariatePlot="qq")
mvn(data, mvnTest="mardia", univariatePlot="qq")
plot(mvn(data, mvnTest="mardia", univariatePlot="qq"))
require(MVN)
mvn(data, mvnTest="mardia", multivariatePlot="qq")
mvn(data, mvnTest="mardia", multivariatePlot="qq")
library(rscala)
library(knitr)
cp <- getwd()
includes <- list.files(file.path(cp, "../target/scala-2.12"), full.names=TRUE)
# ... args passed to rscala::scala functions. See ?rscala::scala for more informations.
make_scala_engine <- function(...) {
engine <- scala(serialize.output = TRUE, stdout = "", JARs=includes)
engine <- force(engine)
function(options) {
code <- paste(options$code, collapse = "\n")
output <- capture.output(invisible(engine + code))
engine_output(options, options$code, output)
}
}
# Register new engine in knitr
knit_engines$set(scala = make_scala_engine())
