cor(X,model$scaling)
head(data)
plot(data2[,1], data2[,2], type="n")
plot(data2[,1], data2[,2], type="n")
text(data2[,1], data2[,2], labels=data2$Group, col=factor(data2$Group))
plot(data2[,1], data2[,2], type="n")
text(data2[,1], data2[,2], labels=data2$Group)
plot(data2[,1], data2[,2], type="n")
text(data2[,1], data2[,2], labels=data2$Group, col=data2$Group)
data <- read.table("data/eskulls.txt", header=TRUE)
head(data)
str(data)
data$PeriodNum <- as.factor(data$Period)
data2 <- data[,c(1:4,7)]
data2
data2 <- data[,c(1:4,8)]
data
data$PeriodNum <- as.numeric(as.factor(data$Period))
data2 <- data[,c(1:4,8)]
data2 <- data[,c(1:4,7)]
data2
write.csv(data2, "data/egyption_skulls.csv", row.names=FALSE)
write.csv(data, "data/egyption_skulls_orig.csv", row.names=FALSE)
distinct(data$Period)
unique(data$Period)
levels(data$Period)
colnames(data2)
install.packages("caret")
zMat <- scala["zMat"]
names(data)
levels(data$Period)
View(data2)
install.packages("caret")
require(caret)
data <- read.csv("data/egyption_skulls.csv", header=TRUE)
data$PeriodNum <- as.factor(data$PeriodNum)
trainIdx <- createDataPartition(y = data$PeriodNum, p=0.75, list=FALSE)
train <- data[trainIdx,]
test <- data[-trainIdx,]
nrow(train)
nrow(test)
nrow(data)
write.csv(train, "data/egyption_skulls_train.csv", row.names=FALSE)
write.csv(test, "data/egyption_skulls_test.csv", row.names=FALSE)
data <- read.csv("data/egyption_skulls.csv", header=TRUE)
trainIdx <- createDataPartition(y = as.factor(data$PeriodNum), p=0.75, list=FALSE)
train <- data[trainIdx,]
test <- data[-trainIdx,]
write.csv(train, "data/egyption_skulls_train.csv", row.names=FALSE)
write.csv(test, "data/egyption_skulls_test.csv", row.names=FALSE)
train <- read.csv(scala["trainFile"], header=TRUE)
names(data)
data2 <- read.csv("data/test_mandible_data.csv", header=TRUE)
data2 <- read.csv("data/test_mandible_data.csv", header=TRUE)
trainIdx <- createDataPartition(y=as.factor(data2$Group), p=0.75, list=FALSE)
train2 <- data2[trainIdx,]
test2 <- data2[-trainIdx,]
write.csv(train, "data/test_mandible_train.csv", row.names=FALSE)
write.csv(test, "data/test_mandible_test.csv", row.names=FALSE)
names(data2)
data2 <- read.csv("data/test_mandible_data.csv", header=TRUE)
trainIdx <- createDataPartition(y=as.factor(data2$Group), p=0.75, list=FALSE)
train2 <- data2[trainIdx,]
test2 <- data2[-trainIdx,]
write.csv(train2, "data/test_mandible_train.csv", row.names=FALSE)
write.csv(test2, "data/test_mandible_test.csv", row.names=FALSE)
names(train2)
require(MASS)
data <- read.csv("data/test_mandible_train.csv", header=TRUE)
data2 <- read.csv("data/test_mandible_test.csv", header=TRUE)
attach(data)
model <- lda(factor(Group) ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9)
model2 <- qda(factor(Group) ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9)
factor(Group)
model2
model2 <- qda(factor(Group) ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9)
model3 <- lda(factor(Group) ~ X1 + X1^2 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9)
model3 <- lda(factor(Group) ~ X1 + X1^2 + X2 + X2^2 + X1:X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9)
model3
model2 <- qda(factor(Group) ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9)
qda(data, factor(Group))
factor(Group)
p <- predict(data2,model)
p <- predict(model, data2)
p
actual <- data2$Group
predicted <- p$class
tabulate(actual,predicted)
actual <- data2$Group
predicted <- p$class
table(actual,predicted)
model2 <- qda(factor(Group) ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9)
attach(data3)
model2 <- qda(factor(Group) ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9)
model2 <- qda(factor(Group) ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9, data3)
data3 <-  read.csv("data/test_mandible_data.csv", header=TRUE)
attach(data3)
model2 <- qda(factor(Group) ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9, data3)
p2 <- predict(model2, data3)
actual <- data3$Group
predicted <- p2$class
table(actual,predicted)
model2 <- qda(factor(Group) ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9, data)
model2 <- qda(factor(Group) ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9, data3)
p2 <- predict(model2, data3)
actual <- data3$Group
predicted <- p2$class
table(actual,predicted)
model2
summary(model2)
model2
data3 <- scale(data3)
attach(data3)
model2 <- qda(factor(Group) ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9, data3)
data3 <- scale(data3)
attach(data3)
model2 <- qda(factor(Group) ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9, data3)
data3 <- data.frame(scale(data3))
attach(data3)
model2 <- qda(factor(Group) ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9, data3)
data3 <-  read.csv("data/test_mandible_data.csv", header=TRUE)
data3 <- data.frame(scale(data3))
attach(data3)
model2 <- qda(factor(Group) ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9, data3)
p2 <- predict(model2, data3)
actual <- data3$Group
predicted <- p2$class
table(actual,predicted)
data
data3
data3 <-  read.csv("data/test_mandible_data.csv", header=TRUE)
attach(data3)
model2 <- qda(factor(Group) ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9, data3)
p2 <- predict(model2, data3)
actual <- data3$Group
predicted <- p2$class
table(actual,predicted)
p2 <- predict(model2, data2)
actual <- data2$Group
predicted <- p2$class
table(actual,predicted)
names(data3)
data3[,3:11]
head(data3[,3:11])
metrics <- scala["metrics"]
nodes <- c("A","B","C","D","E","F","G","H")
adj <- as.matrix(data.frame(
A=c(0, 1, 1, 0, 0, 0, 0, 0),
B=c(0, 0, 0, 0, 0, 1, 0, 1),
C=c(0, 0, 0, 1, 0, 0, 0, 0),
D=c(0, 0, 0, 0, 1, 0, 0, 1),
E=c(0, 0, 0, 0, 0, 1, 1, 1),
F=c(0, 0, 0, 0, 0, 0, 1, 0),
G=c(0, 0, 0, 0, 0, 0, 0, 1),
H=c(0, 0, 0, 0, 0, 0, 0, 0)
))
nodes <- c("A","B","C","D","E","F","G","H")
adj <- as.matrix(data.frame(
A=c(0, 1, 1, 0, 0, 0, 0, 0),
B=c(0, 0, 0, 0, 0, 1, 0, 0),
C=c(0, 0, 0, 1, 0, 0, 0, 0),
D=c(0, 0, 0, 0, 1, 0, 0, 1),
E=c(0, 0, 0, 0, 0, 1, 1, 1),
F=c(0, 0, 0, 0, 0, 0, 1, 0),
G=c(0, 0, 0, 0, 0, 0, 0, 1),
H=c(0, 0, 0, 0, 0, 0, 0, 0)
))
weights <- as.matrix(data.frame(
A=c(0, 100, 30, 0, 0, 0, 0, 0),
B=c(0, 0, 0, 0, 0, 300, 0, 0),
C=c(0, 0, 0, 200, 0, 0, 0, 0),
D=c(0, 0, 0, 0, 80, 0, 0, 90),
E=c(0, 0, 0, 0, 0, 50, 150, 30),
F=c(0, 0, 0, 0, 0, 0, 70, 0),
G=c(0, 0, 0, 0, 0, 0, 0, 70),
H=c(0, 0, 0, 0, 0, 0, 0, 0)
))
out1 <- t(adj)%*%adj
(out1 <- t(adj)%*%adj)
(out2 <- t(out1)%*%(out1))
(out3 <- t(out2)%*%(out2))
(out1 <- t(adj)%*%adj)
(out2 <- t(out1)%*%(adj))
(out3 <- t(out2)%*%(adj))
adj
(out1 <- t(adj)%*%adj)
(out2 <- t(out1)%*%(adj))
(out3 <- t(out2)%*%(adj))
nodes <- c("A","B","C","D","E","F","G","H")
adj <- as.matrix(data.frame(
A=c(0, 1, 1, 0, 0, 0, 0, 0),
B=c(0, 0, 0, 0, 0, 1, 0, 0),
C=c(0, 0, 0, 1, 0, 0, 0, 0),
D=c(0, 0, 0, 0, 1, 0, 0, 1),
E=c(0, 0, 0, 0, 0, 1, 1, 1),
F=c(0, 0, 0, 0, 0, 0, 1, 0),
G=c(0, 0, 0, 0, 0, 0, 0, 1),
H=c(0, 0, 0, 0, 0, 0, 0, 0)
))
row.names(adj) <- nodes
weights <- as.matrix(data.frame(
A=c(0, 100, 30, 0, 0, 0, 0, 0),
B=c(0, 0, 0, 0, 0, 300, 0, 0),
C=c(0, 0, 0, 200, 0, 0, 0, 0),
D=c(0, 0, 0, 0, 80, 0, 0, 90),
E=c(0, 0, 0, 0, 0, 50, 150, 30),
F=c(0, 0, 0, 0, 0, 0, 70, 0),
G=c(0, 0, 0, 0, 0, 0, 0, 70),
H=c(0, 0, 0, 0, 0, 0, 0, 0)
))
row.names(weights) <- nodes
adj
(out1 <- t(adj)%*%adj)
(out2 <- t(out1)%*%(adj))
(out3 <- t(out2)%*%(adj))
adj <- as.matrix(data.frame(
A=c(0, 1, 1, 0, 0, 0, 0, 0),
B=c(0, 0, 0, 0, 0, 1, 0, 0),
C=c(0, 0, 0, 1, 0, 0, 0, 0),
D=c(0, 0, 0, 0, 1, 0, 0, 1),
E=c(0, 0, 0, 0, 0, 1, 1, 1),
F=c(0, 0, 0, 0, 0, 0, 1, 0),
G=c(0, 0, 0, 0, 0, 0, 0, 1),
H=c(0, 0, 0, 0, 0, 0, 0, 0)
))
row.names(adj) <- nodes
weights <- as.matrix(data.frame(
A=c(0, 100, 30, 0, 0, 0, 0, 0),
B=c(0, 0, 0, 0, 0, 300, 0, 0),
C=c(0, 0, 0, 200, 0, 0, 0, 0),
D=c(0, 0, 0, 0, 80, 0, 0, 90),
E=c(0, 0, 0, 0, 0, 50, 150, 30),
F=c(0, 0, 0, 0, 0, 0, 70, 0),
G=c(0, 0, 0, 0, 0, 0, 0, 70),
H=c(0, 0, 0, 0, 0, 0, 0, 0)
))
row.names(weights) <- nodes
adj
adj <- as.matrix(data.frame(
A=c(0, 1, 1, 0, 0, 0, 0, 0),
B=c(0, 0, 0, 0, 0, 1, 0, 0),
C=c(0, 0, 0, 1, 0, 0, 0, 0),
D=c(0, 0, 0, 0, 1, 0, 0, 1),
E=c(0, 0, 0, 0, 0, 1, 1, 1),
F=c(0, 0, 0, 0, 0, 0, 1, 0),
G=c(0, 0, 0, 0, 0, 0, 0, 1),
H=c(0, 0, 0, 0, 0, 0, 0, 0)
))
adj
nodes <- c("A","B","C","D","E","F","G","H")
adj <- t(as.matrix(data.frame(
A=c(0, 1, 1, 0, 0, 0, 0, 0),
B=c(0, 0, 0, 0, 0, 1, 0, 0),
C=c(0, 0, 0, 1, 0, 0, 0, 0),
D=c(0, 0, 0, 0, 1, 0, 0, 1),
E=c(0, 0, 0, 0, 0, 1, 1, 1),
F=c(0, 0, 0, 0, 0, 0, 1, 0),
G=c(0, 0, 0, 0, 0, 0, 0, 1),
H=c(0, 0, 0, 0, 0, 0, 0, 0)
)))
col.names(adj) <- nodes
weights <- t(as.matrix(data.frame(
A=c(0, 100, 30, 0, 0, 0, 0, 0),
B=c(0, 0, 0, 0, 0, 300, 0, 0),
C=c(0, 0, 0, 200, 0, 0, 0, 0),
D=c(0, 0, 0, 0, 80, 0, 0, 90),
E=c(0, 0, 0, 0, 0, 50, 150, 30),
F=c(0, 0, 0, 0, 0, 0, 70, 0),
G=c(0, 0, 0, 0, 0, 0, 0, 70),
H=c(0, 0, 0, 0, 0, 0, 0, 0)
)))
col.names(weights) <- nodes
adj
(out1 <- t(adj)%*%adj)
(out2 <- t(out1)%*%(adj))
(out3 <- t(out2)%*%(adj))
nodes <- c("A","B","C","D","E","F","G","H")
adj <- t(as.matrix(data.frame(
A=c(0, 1, 1, 0, 0, 0, 0, 0),
B=c(0, 0, 0, 0, 0, 1, 0, 0),
C=c(0, 0, 0, 1, 0, 0, 0, 0),
D=c(0, 0, 0, 0, 1, 0, 0, 1),
E=c(0, 0, 0, 0, 0, 1, 1, 1),
F=c(0, 0, 0, 0, 0, 0, 1, 0),
G=c(0, 0, 0, 0, 0, 0, 0, 1),
H=c(0, 0, 0, 0, 0, 0, 0, 0)
)))
colnames(adj) <- nodes
weights <- t(as.matrix(data.frame(
A=c(0, 100, 30, 0, 0, 0, 0, 0),
B=c(0, 0, 0, 0, 0, 300, 0, 0),
C=c(0, 0, 0, 200, 0, 0, 0, 0),
D=c(0, 0, 0, 0, 80, 0, 0, 90),
E=c(0, 0, 0, 0, 0, 50, 150, 30),
F=c(0, 0, 0, 0, 0, 0, 70, 0),
G=c(0, 0, 0, 0, 0, 0, 0, 70),
H=c(0, 0, 0, 0, 0, 0, 0, 0)
)))
colnames(weights) <- nodes
adj
(out1 <- t(adj)%*%adj)
(out2 <- t(out1)%*%(adj))
(out3 <- t(out2)%*%(adj))
(out4 <- t(out3)%*%(adj))
(out5 <- t(out4)%*%(adj))
(out6 <- t(out5)%*%(adj))
(out7 <- t(out6)%*%(adj))
(out8 <- t(out7)%*%(adj))
(out9 <- t(out9)%*%(adj))
(out9 <- t(out8)%*%(adj))
(out10 <- t(out10)%*%(adj))
(out10 <- t(out9)%*%(adj))
(out11 <- t(out10)%*%(adj))
# set the JVM
Sys.setenv(JAVA_HOME = '/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/')
Sys.setenv(LD_LIBRARY_PATH = '$LD_LIBRARY_PATH:$JAVA_HOME/lib')
# setup the jvmr interpreter
library(rJava)
options(java.parameters = c("-Xmx1G", "-XX:MaxPermGen=1G"))
cp <- getwd()
includes <- list.files(file.path(cp, "../target"), full.names=TRUE)
library(jvmr)
install.packages("jvmr")
names(knitr::knit_engines$get())
```{r, engine='scala', message=FALSE, results='hide'}
// imports
import java.io.File
import scala.collection.mutable
import au.id.cxd.math.data.CsvReader
import au.id.cxd.math.data.MatrixReader
import au.id.cxd.math.function.transform.StandardisedNormalisation
import au.id.cxd.math.probability.analysis._
import breeze.linalg.{DenseMatrix, eigSym, inv, svd}
import au.id.cxd.math.function.distance.MahalanobisDistance
import au.id.cxd.math.probability.continuous.ChiSquare
val fileName:String = "/Users/cd/Projects/scala/scala-au.id.cxd.math-gh-pages/scala-au.id.cxd.math/data/iris_virginica.csv"
val mat = MatrixReader.readFileAt(fileName)
// extract the columns of interest.
val data = mat(::, 0 to 3)
```
```{scala, message=FALSE, results='hide'}
// imports
import java.io.File
import scala.collection.mutable
import au.id.cxd.math.data.CsvReader
import au.id.cxd.math.data.MatrixReader
import au.id.cxd.math.function.transform.StandardisedNormalisation
import au.id.cxd.math.probability.analysis._
import breeze.linalg.{DenseMatrix, eigSym, inv, svd}
import au.id.cxd.math.function.distance.MahalanobisDistance
import au.id.cxd.math.probability.continuous.ChiSquare
val fileName:String = "/Users/cd/Projects/scala/scala-au.id.cxd.math-gh-pages/scala-au.id.cxd.math/data/iris_virginica.csv"
val mat = MatrixReader.readFileAt(fileName)
// extract the columns of interest.
val data = mat(::, 0 to 3)
```
knitr::opts_chunk$set(echo = TRUE)
require(devtools)
install_github("cran/jvmr")
install.packages("rJava")
install.packages("rJava")
require(rJava)
install_github("cran/jvmr")
devtools::install_github("cran/jvmr")
scala --help
devtools::install_github("cran/jvmr")
require(jvmr)
devtools::install_url("https://cran.r-project.org/src/contrib/Archive/jvmr/jvmr_2.11.2.1.tar.gz")
knitr::opts_chunk$set(echo = TRUE)
library(rscala)
library(knitr)
# ... args passed to rscala::scala functions. See ?rscala::scala for more informations.
make_scala_engine <- function(...) {
cp <- getwd()
conf <- scalaConfig()
conf$scalaHome <- "/usr/local/Cellar/scala@2.11/2.11.12/libexec"
conf$scalaCmd <- paste0(conf$scalaHome,"/bin/scala")
conf$scalaMajorVersion <- "2.11"
conf$javaHome <- "/Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/Home"
conf$javaCmd <- paste0(conf$javaHome, "Contents/Home/bin/java")
conf$javaMajorVersion <- "1.8"
includes <- list.files(file.path(cp, "../target"), full.names=TRUE)
engine <- rscala::scala(serialize.output = TRUE, stdout = TRUE, stderr=TRUE, JARs=includes)
engine <- force(engine)
function(options) {
code <- paste(options$code, collapse = "\n")
output <- capture.output(invisible(engine + code))
engine_output(options, options$code, output)
}
}
# Register new engine in knitr
knit_engines$set(scala = make_scala_engine())
scalaConfig()
library(rscala)
library(knitr)
# ... args passed to rscala::scala functions. See ?rscala::scala for more informations.
make_scala_engine <- function(...) {
cp <- getwd()
conf <- scalaConfig()
includes <- list.files(file.path(cp, "../target"), full.names=TRUE)
engine <- rscala::scala(serialize.output = TRUE, stdout = TRUE, stderr=TRUE, JARs=includes)
engine <- force(engine)
function(options) {
code <- paste(options$code, collapse = "\n")
output <- capture.output(invisible(engine + code))
engine_output(options, options$code, output)
}
}
# Register new engine in knitr
knit_engines$set(scala = make_scala_engine())
# set the JVM
Sys.setenv(JAVA_HOME = '/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/')
Sys.setenv(LD_LIBRARY_PATH = '$LD_LIBRARY_PATH:$JAVA_HOME/lib')
# setup the jvmr interpreter
library(rJava)
options(java.parameters = c("-Xmx1G", "-XX:MaxPermGen=1G"))
cp <- getwd()
includes <- list.files(file.path(cp, "../target"), full.names=TRUE)
library(jvmr)
devtools::install_github("cran/jvmr")
install.packages("rJava")
install.packages("rJava")
devtools::install_packages("rJava")
devtools::install_github("cran/rJava")
devtools::install_url("https://cran.rstudio.com/bin/macosx/el-capitan/contrib/3.5/rJava_0.9-8.tgz")
devtools::install_url("https://cran.rstudio.com/bin/macosx/el-capitan/contrib/3.5/rJava_0.9-9.tgz")
javareconfig
devtools::install_github("cran/rJava")
install.packages("rJava")
require(rJava)
J("java.lang.Double")$parseDouble("10.2")
.jinit()
J("java.lang.Double")$parseDouble("10.2")
J("System")$getProperty("java.version")
J("java.lang.System")$getProperty("java.version")
install.packages("jvmr")
devtools::install_github("cran/jvmr")
devtools::install_github("cran/jvmr")
devtools::install_github("cran/jvmr")
# set the JVM
Sys.setenv(JAVA_HOME = '/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/')
Sys.setenv(LD_LIBRARY_PATH = '$LD_LIBRARY_PATH:$JAVA_HOME/lib')
library(rscala)
library(knitr)
# ... args passed to rscala::scala functions. See ?rscala::scala for more informations.
make_scala_engine <- function(...) {
cp <- getwd()
includes <- list.files(file.path(cp, "../target"), full.names=TRUE)
engine <- rscala::scala(serialize.output = TRUE, stdout = "", JARs=includes, ...)
engine <- force(engine)
function(options) {
code <- paste(options$code, collapse = "\n")
output <- capture.output(invisible(engine + code))
engine_output(options, options$code, output)
}
}
# Register new engine in knitr
knit_engines$set(scala = make_scala_engine())
d1 <- c(2.06133180060984, 0.898926649890006,
1.8675976088232014,
-0.8446810761897462,
1.0926608416766443,
-0.45721269261646774,
0.705192458103366,
-2.0070862269095797,
1.2863950334632828,
-1.4258836515496631,
-1.8133520351229415,
-0.06974430904318926,
0.1239898827434491,
0.3177240745300875,
-0.6509468844031078,
1.480129225249923,
-0.6509468844031078,
-0.2634785008298294,
0.5114582663167275,
-0.6509468844031078,
-0.06974430904318926,
0.3177240745300875, 0.705192458103366, 0.3177240745300875, 0.898926649890006, 1.2863950334632828, 1.6738634170365612, 1.480129225249923, 0.1239898827434491, -0.45721269261646774, -0.8446810761897462, -0.8446810761897462, -0.2634785008298294, 0.1239898827434491, -1.0384152679763845, 0.1239898827434491, 1.480129225249923, 0.705192458103366, -0.6509468844031078, -0.8446810761897462, -0.8446810761897462, 0.3177240745300875, -0.2634785008298294, -1.8133520351229415, -0.6509468844031078, -0.45721269261646774, -0.45721269261646774, 0.5114582663167275,
-1.619617843336303,
-0.45721269261646774)
# set the JVM
Sys.setenv(JAVA_HOME = '/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/')
Sys.setenv(LD_LIBRARY_PATH = '$LD_LIBRARY_PATH:$JAVA_HOME/lib')
# setup the jvmr interpreter
library(rJava)
options(java.parameters = c("-Xmx1G", "-XX:MaxPermGen=1G"))
cp <- getwd()
includes <- list.files(file.path(cp, "../target"), full.names=TRUE)
library(jvmr)
library(knitr)
scala <- scalaInterpreter(includes)
knit_engines$set(scalainr = function(options) {
code <- paste(options$code, collapse = "\n")
output <- capture.output(interpret(scala, code, echo.output = TRUE))
engine_output(options, options$code, output)
})
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
library(rscala)
rscala::scalaConfig()
names(rscala::scalaVersionJARs())
library(rscala)
cp <- getwd()
includes <- list.files(file.path(cp, "../target/scala-2.12"), full.names=TRUE)
engine <- rscala::scala(serialize.output = TRUE, stdout = "", JARs=includes, ...)
engine <- scala(serialize.output = TRUE, stdout = "", JARs=includes, ...)
engine <- scala(serialize.output = TRUE, stdout = "", JARs=includes)
engine <- force(engine)
engine + 'import au.id.cxd.math.data.CsvReader'
