install.packages("rscala")
toTest <- c("R", "scala", "bash")
where <- Sys.which(toTest)
exists <- nchar(where) > 0 # TODO: Only run chunk if runtime exists
for(n in names(where)) {
path <- where[n]
if(nchar(path) <= 0) {
path <- "<not found>"
}
message("* __", n, "__: `", path, "`\n")
}
toTest <- c("R", "scala", "bash")
where <- Sys.which(toTest)
exists <- nchar(where) > 0 # TODO: Only run chunk if runtime exists
require(rscala)
require(rscala)
scala(classpath="target/au.id.cxd.math-assembly-1.0.jar")
s <- scala()
scalaInfo()
scala()
)
scala(debug=TRUE)
devtools::install_github("cran/jvmr")
# setup the jvmr interpreter
library(jvmr)
library(knitr)
scala <- scalaInterpreter()
knit_engines$set(scalar = function(options) {
code <- paste(options$code, collapse = "\n")
output <- capture.output(interpret(scala, code, echo.output = TRUE))
engine_output(options, options$code, output)
})
# setup the jvmr interpreter
library(jvmr)
library(knitr)
scala <- scalaInterpreter()
knit_engines$set(scala = function(options) {
code <- paste(options$code, collapse = "\n")
output <- capture.output(interpret(scala, code, echo.output = TRUE))
engine_output(options, options$code, output)
})
# setup the jvmr interpreter
library(jvmr)
library(knitr)
scala <- scalaInterpreter()
knit_engines$set(scalar = function(options) {
code <- paste(options$code, collapse = "\n")
output <- capture.output(interpret(scala, code, echo.output = TRUE))
engine_output(options, options$code, output)
})
# setup the jvmr interpreter
library(jvmr)
library(knitr)
scala <- scalaInterpreter()
knit_engines$set(scalainr = function(options) {
code <- paste(options$code, collapse = "\n")
output <- capture.output(interpret(scala, code, echo.output = TRUE))
engine_output(options, options$code, output)
})
# setup the jvmr interpreter
library(jvmr)
library(knitr)
scala <- scalaInterpreter()
knit_engines$set(scalainr = function(options) {
code <- paste(options$code, collapse = "\n")
output <- capture.output(interpret(scala, code, echo.output = TRUE))
engine_output(options, options$code, output)
})
getwd()
# setup the jvmr interpreter
library(rJava)
library(jvmr)
library(knitr)
cp <- getwd()
.jinit(list.files(file.path(cp, "target"), full.names=TRUE))
scala <- scalaInterpreter()
knit_engines$set(scalainr = function(options) {
code <- paste(options$code, collapse = "\n")
output <- capture.output(interpret(scala, code, echo.output = TRUE))
engine_output(options, options$code, output)
})
# setup the jvmr interpreter
library(rJava)
options(java.parameters = c("-Xmx1G", "-XX:MaxPermGen=1G"))
cp <- getwd()
.jinit(list.files(file.path(cp, "target"), full.names=TRUE))
library(jvmr)
library(knitr)
scala <- scalaInterpreter()
knit_engines$set(scalainr = function(options) {
code <- paste(options$code, collapse = "\n")
output <- capture.output(interpret(scala, code, echo.output = TRUE))
engine_output(options, options$code, output)
})
getOption("jvmr.class.path")
list.files(file.path(cp, "target"), full.names=TRUE)
cp <- getwd()
list.files(file.path(cp, "target"), full.names=TRUE))
list.files(file.path(cp, "target"), full.names=TRUE)
includes <- list.files(file.path(cp, "target"), full.names=TRUE)
scalaInterpreter(includes)
# setup the jvmr interpreter
library(rJava)
options(java.parameters = c("-Xmx1G", "-XX:MaxPermGen=1G"))
cp <- getwd()
includes <- list.files(file.path(cp, "target"), full.names=TRUE)
library(jvmr)
library(knitr)
scala <- scalaInterpreter(includes)
# setup the jvmr interpreter
library(rJava)
options(java.parameters = c("-Xmx1G", "-XX:MaxPermGen=1G"))
cp <- getwd()
includes <- list.files(file.path(cp, "target"), full.names=TRUE)
library(jvmr)
library(knitr)
scala <- scalaInterpreter(includes)
!is.null(includes)
c(includes)
includes
cp <- getwd()
includes <- list.files(file.path(cp, "target"), full.names=TRUE)
includes
cp
cp <- getwd()
includes <- list.files(file.path(cp, "../target"), full.names=TRUE)
includes
# setup the jvmr interpreter
library(rJava)
options(java.parameters = c("-Xmx1G", "-XX:MaxPermGen=1G"))
cp <- getwd()
includes <- list.files(file.path(cp, "../target"), full.names=TRUE)
library(jvmr)
library(knitr)
scala <- scalaInterpreter(includes)
knit_engines$set(scalainr = function(options) {
code <- paste(options$code, collapse = "\n")
output <- capture.output(interpret(scala, code, echo.output = TRUE))
engine_output(options, options$code, output)
})
