S <- ((n-1)/n)*cov(data)
d <- as.matrix(data)
Y <- d%*%solve(S)%*%t(d)
I <- matrix(c(rep(1,n)),1,n)
A <- matrix(diag(t(Y)))%*%I
B <-  matrix(c(rep(1,n)),n,1)%*%diag(t(Y))
dif <- scale(data, scale = FALSE)
Dj <- diag(dif%*%solve(S)%*%t(dif))
Djk <- - 2*t(Y) + A + B
b <- 1/(sqrt(2))*((2*p + 1)/4)^(1/(p + 4))*(n^(1/(p + 4)))
a1 <- (sum(exp( - (b^2)/2 * Djk)))
b1 <- sum(exp( - ((b^2)/(2 * (1 + (b^2)))) * Dj))
hz <- n * (1/(n*n) * a1 - 2*((1+(b^2))^(-p/2)) * (1/n)* b1 + ((1+(2*b^2))^(-p/2)))
hz
a1
b1
a1
b1
a1 <- 122.579
b1 <- 19.052
hz <- n * (1/(n*n) * a1 - 2*((1+(b^2))^(-p/2)) * (1/n)* b1 + ((1+(2*b^2))^(-p/2)))
hz
b*b
logHz <- log(hz)
wb <- (1 + b^2)*(1 + 3*b^2)
a <- 1 + 2*b^2
mu <- 1 - a^(- p/2)*(1 + p*b^2/a + (p*(p + 2)*(b^4))/(2*a^2)) #HZ mean
si2 <- 2*(1 + 4*b^2)^(- p/2) +
2*a^( - p)*(1 + (2*p*b^4)/a^2 +
(3*p*(p + 2)*b^8)/(4*a^4)) -
4*wb^( - p/2)*(1 + (3*p*b^4)/(2*wb) )                                                                                                 + (p*(p + 2)*b^8)/(2*wb^2)) #HZ variance
pmu <- log(sqrt(mu^4/(si2 + mu^2))) #lognormal HZ mean
psi <- sqrt(log((si2 + mu^2)/mu^2)) #lognormal HZ variance
P <- 1 - plnorm(hz,pmu,psi) #P-value associated to the HZ statistic
P
plnorm(-0.3)
plnorm(-0.3)
llog(-0.3)
log(-0.3)
sum(Dj)
sum(Djk)
Dj
Djk
head(Djk)
Djk
diag(Djk)
d1 <- c(2.06133180060984, 0.898926649890006, 1.8675976088232014, -0.8446810761897462, 1.0926608416766443, -0.45721269261646774, 0.705192458103366, -2.0070862269095797, 1.2863950334632828, -1.4258836515496631, -1.8133520351229415, -0.06974430904318926, 0.1239898827434491, 0.3177240745300875, -0.6509468844031078, 1.480129225249923, -0.6509468844031078, -0.2634785008298294, 0.5114582663167275, -0.6509468844031078, -0.06974430904318926, 0.3177240745300875, 0.705192458103366, 0.3177240745300875, 0.898926649890006, 1.2863950334632828, 1.6738634170365612, 1.480129225249923, 0.1239898827434491, -0.45721269261646774, -0.8446810761897462, -0.8446810761897462, -0.2634785008298294, 0.1239898827434491, -1.0384152679763845, 0.1239898827434491, 1.480129225249923, 0.705192458103366, -0.6509468844031078, -0.8446810761897462, -0.8446810761897462, 0.3177240745300875, -0.2634785008298294, -1.8133520351229415, -0.6509468844031078, -0.45721269261646774, -0.45721269261646774, 0.5114582663167275, -1.619617843336303, -0.45721269261646774)
mean(d1)
sum(d1)
n1 <- length(d1)
total <- 0
for(i in 1:length(d1)) {
total <- total + d1[i]
}
total
sum(d1)
sum(d1*10)
n1 <- length(d1)
total <- 0
for(i in 1:length(d1)) {
total <- total + d1[i]*10
}
total
n1 <- length(d1)
total <- 0
for(i in 1:length(d1)) {
total <- total + d1[i]
}
total
sum(d1)
str(d1)
mean(d1)
total/n1
total2 <- Reduce("x",d1 )
total2 <- Reduce("+",d1 )
total2
total == total2
total2 <- Reduce("+",d1[1:49] )
(total2 <- Reduce("+",d1[1:49] ))
(sum(d1[1:49]))
as.double(d1)
sum(as.double(d1))
(total3 <- Reduce("+",d2))
d2 <- as.double(d1)
(total3 <- Reduce("+",d2))
sum(d2)
(total3 <- Reduce("+",d2[1:49]))
sum(d2[1:49])
(total3 <- Reduce("+",d2))
sum(d2)
d2[n]
d2[n1]
d1[n1]
summary(d1[n1])
(total3 <- Reduce("+",d2[1:49]))
sum(d2[1:49])
(Reduce("+",d2[1:49]) + d2[n1])
sum(d2[1:49]) + d2[n1]
d2[n1]
d2[n1])
d2[n1]
(Reduce("+",d2[1:49]) + d2[n1])
sum(d2[1:49]) + d2[n1]
sum(d2[1:49])
Reduce("+",d2[1:49])
(Reduce("+",d2[1:49]) + dtest)
sum(d2[1:49]) + dtest
dtest <- -0.457
(Reduce("+",d2[1:49]) + dtest)
sum(d2[1:49]) + dtest
dtest <- -0.457212692616467
(Reduce("+",d2[1:49]) + dtest)
sum(d2[1:49]) + dtest
dtest <- -0.45721269261646
(Reduce("+",d2[1:49]) + dtest)
sum(d2[1:49]) + dtest
dtest <- -0.4572126926164
(Reduce("+",d2[1:49]) + dtest)
sum(d2[1:49]) + dtest
dtest <- -0.457212692616
(Reduce("+",d2[1:49]) + dtest)
sum(d2[1:49]) + dtest
dtest <- -0.45721269261
(Reduce("+",d2[1:49]) + dtest)
sum(d2[1:49]) + dtest
dtest <- -0.4572126926
(Reduce("+",d2[1:49]) + dtest)
sum(d2[1:49]) + dtest
dtest <- -0.457212692
(Reduce("+",d2[1:49]) + dtest)
sum(d2[1:49]) + dtest
dtest <- -0.45721269
(Reduce("+",d2[1:49]) + dtest)
sum(d2[1:49]) + dtest
dtest <- -0.4572126
(Reduce("+",d2[1:49]) + dtest)
sum(d2[1:49]) + dtest
(Reduce("+",d2[1:49]) + d2[n1])
sum(d2[1:49]) + d2[n1]
is.double(d1)
d1 <- c(2.06133180060984, 0.898926649890006, 1.8675976088232014, -0.8446810761897462, 1.0926608416766443, -0.45721269261646774, 0.705192458103366, -2.0070862269095797, 1.2863950334632828, -1.4258836515496631, -1.8133520351229415, -0.06974430904318926, 0.1239898827434491, 0.3177240745300875, -0.6509468844031078, 1.480129225249923, -0.6509468844031078, -0.2634785008298294, 0.5114582663167275, -0.6509468844031078, -0.06974430904318926, 0.3177240745300875, 0.705192458103366, 0.3177240745300875, 0.898926649890006, 1.2863950334632828, 1.6738634170365612, 1.480129225249923, 0.1239898827434491, -0.45721269261646774, -0.8446810761897462, -0.8446810761897462, -0.2634785008298294, 0.1239898827434491, -1.0384152679763845, 0.1239898827434491, 1.480129225249923, 0.705192458103366, -0.6509468844031078, -0.8446810761897462, -0.8446810761897462, 0.3177240745300875, -0.2634785008298294, -1.8133520351229415, -0.6509468844031078, -0.45721269261646774, -0.45721269261646774, 0.5114582663167275,
-1.619617843336303,
-0.45721269261646774)
mean(d1)
sum(d1)
n1 <- length(d1)
total <- 0
for(i in 1:length(d1)) {
total <- total + d1[i]
}
total
# why is sum different to total?
sum(d1)
(total2 <- Reduce("+",d1[1:49] ))
(sum(d1[1:49]))
d2 <- as.double(d1)
(total3 <- Reduce("+",d2[1:49]))
sum(d2[1:49])
(Reduce("+",d2[1:49]) + d2[n1])
sum(d2[1:49]) + d2[n1]
dtest <- -0.4572126
(Reduce("+",d2[1:49]) + dtest)
sum(d2[1:49]) + dtest
sum(d1)
n1 <- length(d1)
total <- 0
for(i in 1:length(d1)) {
total <- total + d1[i]
}
total
mean(d1)
total/n1
total <- 0.0
for(i in 1:length(d1)) {
total <- total + d1[i]
}
total
n1 <- length(d1)
total <- as.double(0.0)
for(i in 1:length(d1)) {
total <- total + as.double(d1[i])
}
total
mean(d1)
d3 <- round(d1,15)
d3
(total4 <- Reduce("+",d3))
sum(d3)
d3 <- round(d1,6)
# these are close to the same
(total4 <- Reduce("+",d3))
sum(d3)
data1 <- read.csv("../data/iris_virginica.csv", header=TRUE)
data <- round(data1[,1:4],6)
data1 <- read.csv("../data/iris_virginica.csv", header=TRUE)
data <- round(data1[,1:4],6)
getwd()
data1 <- read.csv("data/iris_virginica.csv", header=TRUE)
data <- round(data1[,1:4],6)
hzTest(data)
require(MVN)
hzTest(data)
hzTest(data, qqplot=TRUE)
mardiaTest(data)
d3 <- round(d1,6)
# these are close to the same
(total4 <- Reduce("+",d3))
sum(d3)
# the difference is due to the precision and rounding that occurs in very small numbers.
d3 <- round(d1,6)
(total4 <- Reduce("+",d3))
sum(d3)
hzTest(data)
data1 <- read.csv("data/iris_virginica.csv", header=TRUE)
data <- data1[,1:4]
hzTest(data)
n <- nrow(data)
p <- ncol(data)
S <- ((n-1)/n)*cov(data)
d <- as.matrix(data)
Y <- d%*%solve(S)%*%t(d)
I <- matrix(c(rep(1,n)),1,n)
A <- matrix(diag(t(Y)))%*%I
B <-  matrix(c(rep(1,n)),n,1)%*%diag(t(Y))
dif <- scale(data, scale = FALSE)
Dj <- diag(dif%*%solve(S)%*%t(dif))
Djk <- - 2*t(Y) + A + B
b <- 1/(sqrt(2))*((2*p + 1)/4)^(1/(p + 4))*(n^(1/(p + 4)))
a1 <- (sum(exp( - (b^2)/2 * Djk)))
b1 <- sum(exp( - ((b^2)/(2 * (1 + (b^2)))) * Dj))
a1 <- 122.579
b1 <- 19.052
hz <- n * (1/(n*n) * a1 - 2*((1+(b^2))^(-p/2)) * (1/n)* b1 + ((1+(2*b^2))^(-p/2)))
hz
n <- nrow(data)
p <- ncol(data)
S <- ((n-1)/n)*cov(data)
d <- as.matrix(data)
Y <- d%*%solve(S)%*%t(d)
I <- matrix(c(rep(1,n)),1,n)
A <- matrix(diag(t(Y)))%*%I
B <-  matrix(c(rep(1,n)),n,1)%*%diag(t(Y))
dif <- scale(data, scale = FALSE)
Dj <- diag(dif%*%solve(S)%*%t(dif))
Djk <- - 2*t(Y) + A + B
b <- 1/(sqrt(2))*((2*p + 1)/4)^(1/(p + 4))*(n^(1/(p + 4)))
a1 <- (sum(exp( - (b^2)/2 * Djk)))
b1 <- sum(exp( - ((b^2)/(2 * (1 + (b^2)))) * Dj))
a1 <- 122.579
b1 <- 19.052
hz <- n * (1/(n*n) * a1 - 2*((1+(b^2))^(-p/2)) * (1/n)* b1 + ((1+(2*b^2))^(-p/2)))
logHz <- log(hz)
wb <- (1 + b^2)*(1 + 3*b^2)
a <- 1 + 2*b^2
mu <- 1 - a^(- p/2)*(1 + p*b^2/a + (p*(p + 2)*(b^4))/(2*a^2)) #HZ mean
si2 <- 2*(1 + 4*b^2)^(- p/2) +
2*a^( - p)*(1 + (2*p*b^4)/a^2 +
(3*p*(p + 2)*b^8)/(4*a^4)) -
4*wb^( - p/2)*(1 + (3*p*b^4)/(2*wb) )                                                                                                 + (p*(p + 2)*b^8)/(2*wb^2)) #HZ variance
pmu <- log(sqrt(mu^4/(si2 + mu^2))) #lognormal HZ mean
psi <- sqrt(log((si2 + mu^2)/mu^2)) #lognormal HZ variance
P <- 1 - plnorm(hz,pmu,psi) #P-value associated to the HZ statistic
P
wb <- (1 + b^2)*(1 + 3*b^2)
a <- 1 + 2*b^2
mu <- 1 - a^(- p/2)*(1 + p*b^2/a + (p*(p + 2)*(b^4))/(2*a^2)) #HZ mean
si2 <- 2*(1 + 4*b^2)^(- p/2) +
2*a^( - p)*(1 + (2*p*b^4)/a^2 +
(3*p*(p + 2)*b^8)/(4*a^4)) -
4*wb^( - p/2)*(1 + (3*p*b^4)/(2*wb) )                                                                                                 + (p*(p + 2)*b^8)/(2*wb^2)) #HZ variance
wb <- (1 + b^2)*(1 + 3*b^2)
a <- 1 + 2*b^2
mu <- 1 - a^(- p/2)*(1 + p*b^2/a + (p*(p + 2)*(b^4))/(2*a^2)) #HZ mean
si2 <- 2*(1 + 4*b^2)^(- p/2) +
2*a^( - p)*(1 + (2*p*b^4)/a^2 +
(3*p*(p + 2)*b^8)/(4*a^4)) -
4*wb^( - p/2)*(1 + (3*p*b^4)/(2*wb) + (p*(p + 2)*b^8)/(2*wb^2)) #HZ variance
pmu <- log(sqrt(mu^4/(si2 + mu^2))) #lognormal HZ mean
psi <- sqrt(log((si2 + mu^2)/mu^2)) #lognormal HZ variance
P <- 1 - plnorm(hz,pmu,psi) #P-value associated to the HZ statistic
P
nrow(data)
nrow(iris)
data <- scale(data1[,1:4])
n <- nrow(data)
p <- ncol(data)
S <- ((n-1)/n)*cov(data)
d <- as.matrix(data)
Y <- d%*%solve(S)%*%t(d)
I <- matrix(c(rep(1,n)),1,n)
A <- matrix(diag(t(Y)))%*%I
B <-  matrix(c(rep(1,n)),n,1)%*%diag(t(Y))
dif <- scale(data, scale = FALSE)
Dj <- diag(dif%*%solve(S)%*%t(dif))
Djk <- - 2*t(Y) + A + B
b <- 1/(sqrt(2))*((2*p + 1)/4)^(1/(p + 4))*(n^(1/(p + 4)))
a1 <- (sum(exp( - (b^2)/2 * Djk)))
b1 <- sum(exp( - ((b^2)/(2 * (1 + (b^2)))) * Dj))
a1 <- 122.579
b1 <- 19.052
hz <- n * (1/(n*n) * a1 - 2*((1+(b^2))^(-p/2)) * (1/n)* b1 + ((1+(2*b^2))^(-p/2)))
hz
hzTest(data)
source(hzTest)
debugSource('~/Projects/scala/scala-au.id.cxd.math-gh-pages/scala-au.id.cxd.math/notes/debughz.R', echo=TRUE)
(n-1)/n
1/n
1/(n-1)
hzTest(data, cov=FALSE)
hzTest(data, FALSE)
debugSource('~/Projects/scala/scala-au.id.cxd.math-gh-pages/scala-au.id.cxd.math/notes/debughz.R', echo=TRUE)
matrix(diag(t(Y)))%*%I
a1 <- (sum(exp( - (b^2)/2 * Djk)))
b1 <- sum(exp( - ((b^2)/(2 * (1 + (b^2)))) * Dj))
hz <- n * (1/(n*n) * a1 - 2*((1+(b^2))^(-p/2)) * (1/n)* b1 + ((1+(2*b^2))^(-p/2)))
## debugging henze zirkler method
data1 <- read.csv("data/iris_virginica.csv", header=TRUE)
data <- scale(data1[,1:4])
hzTest(data)
n <- nrow(data)
p <- ncol(data)
S <- ((n-1)/n)*cov(data)
d <- as.matrix(data)
Y <- d%*%solve(S)%*%t(d)
I <- matrix(c(rep(1,n)),1,n)
A <- matrix(diag(t(Y)))%*%I
B <-  matrix(c(rep(1,n)),n,1)%*%diag(t(Y))
dif <- scale(data, scale = FALSE)
Dj <- diag(dif%*%solve(S)%*%t(dif))
Djk <- - 2*t(Y) + A + B
b <- 1/(sqrt(2))*((2*p + 1)/4)^(1/(p + 4))*(n^(1/(p + 4)))
a1 <- (sum(exp( - (b^2)/2 * Djk)))
b1 <- sum(exp( - ((b^2)/(2 * (1 + (b^2)))) * Dj))
#a1 <- 122.579
#b1 <- 19.052
hz <- n * (1/(n*n) * a1 - 2*((1+(b^2))^(-p/2)) * (1/n)* b1 + ((1+(2*b^2))^(-p/2)))
logHz <- log(hz)
wb <- (1 + b^2)*(1 + 3*b^2)
a <- 1 + 2*b^2
mu <- 1 - a^(- p/2)*(1 + p*b^2/a + (p*(p + 2)*(b^4))/(2*a^2)) #HZ mean
si2 <- 2*(1 + 4*b^2)^(- p/2) +
2*a^( - p)*(1 + (2*p*b^4)/a^2 +
(3*p*(p + 2)*b^8)/(4*a^4)) -
4*wb^( - p/2)*(1 + (3*p*b^4)/(2*wb) + (p*(p + 2)*b^8)/(2*wb^2)) #HZ variance
pmu <- log(sqrt(mu^4/(si2 + mu^2))) #lognormal HZ mean
psi <- sqrt(log((si2 + mu^2)/mu^2)) #lognormal HZ variance
P <- 1 - plnorm(hz,pmu,psi) #P-value associated to the HZ statistic
data2 <- iris
data2 <- data2[,1:4]
hz
O
P
b
data2 <- read.csv("data/test_sparrows.csv", header=TRUE)
head(data2)
data2 <- scale(data2[,1:5])
hzTest(data2)
hzTest(data)
hzTest(data2, qqplot=TRUE)
hzTest(data2, qqplot=TRUE)
mardiaTest(data2)
hzTest(data)
hzTest(data2, qqplot=TRUE)
data2 <- read.csv("data/test_mandible_data.csv", header=TRUE)
head(data2)
data3 <- read.csv("data/test_sparrows.csv", header=TRUE)
head(data3)
data2 <- read.csv("data/test_mandible_data.csv", header=TRUE)
data2 <- scale(data2[,2:10])
data3 <- read.csv("data/test_sparrows.csv", header=TRUE)
data3 <- scale(data3[,2:6])
hzTest(data)
hzTest(data3)
hzTest(data2)
data4 <- iris
data4 <- scale(data4[,1:4])
hzTest(data4)
hzTest(data4)
hzTest(data1)
hzTest(data)
hzTest(data4)
hzTest(data3)
hzTest(data3)
hzTest(data3, qqplot=TRUE)
1.0 - pchisq(23.703931377823114, 20)
data <- read.table("data/proteinemploy.txt", header=TRUE)
head(data)
nrow(data)
data[,10:ncol(data)]
data2 <- data[,10:ncol(data)]
data2
write.csv("data/employ_pop.csv", row.names=FALSE)
write.csv(data2,"data/employ_pop.csv", row.names=FALSE)
data2 <- data[,c(1,10:ncol(data))]
write.csv(data2,"data/employ_pop.csv", row.names=FALSE)
data2$Country <- as.numaric(factor(data2$Country))
data2$Country <- as.numeric(factor(data2$Country))
write.csv(data2,"data/employ_pop.csv", row.names=FALSE)
ncol(data2)
data[,1]
write.csv(data[,1], "data/employ_countries.csv", row.names=FALSE)
read.csv("data/employ_pop.csv", header=TRUE)
data <- read.csv("data/employ_pop.csv", header=TRUE)
data <- data[,c(1,3:ncol(data))]
data
write.csv(data, "data/employ_pop.csv",row.names=FALSE)
data <- read.csv("data/employ_pop.csv", header=TRUE)
require(MASS)
colnames(data)
attach(data)
model <- lda(Country ~ AGR + MIN + MAN + PS + CON + SER + FIN + SPS + TC)
model
model <- lda(Country ~ AGR + MIN + MAN + PS + CON + SER + FIN + SPS + TC)
str(data)
attach(data)
model <- lda(as.factor(Country) ~ AGR + MIN + MAN + PS + CON + SER + FIN + SPS + TC)
model <- lda(factor(Country) ~ AGR + MIN + MAN + PS + CON + SER + FIN + SPS + TC)
model <- lda(factor(Country) ~ AGR + MIN + MAN + PS + CON + SER + FIN + SPS + TC, data=data)
data <- read.csv("data/test_mandible_data", header=TRUE)
data <- read.csv("data/test_mandible_data.csv", header=TRUE)
names(data)
attach(data)
model <- lda(factor(Country) ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9)
attach(data)
model <- lda(factor(Group) ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9)
model
model$terms
names(model)
model$scaling
model$xlevels
model$lev
head(data)
X <- data[,3:11]
X%*%model$scaling
X%*%t(model$scaling)
as.matrix(X)%*%t(model$scaling)
as.matrix(X)%*%model$scaling
projection <- as.matrix(X)%*%model$scaling
nrow(data)
data2 <- as.data.frame(projection)
nrow(data2)
data2$Group <- data$Group
xyplot(data2[,1], data2[,2])
plot(data2[,1], data2[,2])
plot(data2[,1], data2[,2], col=factor(data2$Group))
cor(X,model$scaling)
head(data)
plot(data2[,1], data2[,2], type="n")
plot(data2[,1], data2[,2], type="n")
text(data2[,1], data2[,2], labels=data2$Group, col=factor(data2$Group))
plot(data2[,1], data2[,2], type="n")
text(data2[,1], data2[,2], labels=data2$Group)
plot(data2[,1], data2[,2], type="n")
text(data2[,1], data2[,2], labels=data2$Group, col=data2$Group)
data <- read.table("data/eskulls.txt", header=TRUE)
head(data)
str(data)
data$PeriodNum <- as.factor(data$Period)
data2 <- data[,c(1:4,7)]
data2
data2 <- data[,c(1:4,8)]
data
data$PeriodNum <- as.numeric(as.factor(data$Period))
data2 <- data[,c(1:4,8)]
data2 <- data[,c(1:4,7)]
data2
write.csv(data2, "data/egyption_skulls.csv", row.names=FALSE)
write.csv(data, "data/egyption_skulls_orig.csv", row.names=FALSE)
distinct(data$Period)
unique(data$Period)
levels(data$Period)
colnames(data2)
install.packages("caret")
zMat <- scala["zMat"]
names(data)
levels(data$Period)
View(data2)
install.packages("caret")
require(caret)
data <- read.csv("data/egyption_skulls.csv", header=TRUE)
data$PeriodNum <- as.factor(data$PeriodNum)
trainIdx <- createDataPartition(y = data$PeriodNum, p=0.75, list=FALSE)
train <- data[trainIdx,]
test <- data[-trainIdx,]
nrow(train)
nrow(test)
nrow(data)
write.csv(train, "data/egyption_skulls_train.csv", row.names=FALSE)
write.csv(test, "data/egyption_skulls_test.csv", row.names=FALSE)
data <- read.csv("data/egyption_skulls.csv", header=TRUE)
trainIdx <- createDataPartition(y = as.factor(data$PeriodNum), p=0.75, list=FALSE)
train <- data[trainIdx,]
test <- data[-trainIdx,]
write.csv(train, "data/egyption_skulls_train.csv", row.names=FALSE)
write.csv(test, "data/egyption_skulls_test.csv", row.names=FALSE)
train <- read.csv(scala["trainFile"], header=TRUE)
names(data)
data2 <- read.csv("data/test_mandible_data.csv", header=TRUE)
data2 <- read.csv("data/test_mandible_data.csv", header=TRUE)
trainIdx <- createDataPartition(y=as.factor(data2$Group), p=0.75, list=FALSE)
train2 <- data2[trainIdx,]
test2 <- data2[-trainIdx,]
write.csv(train, "data/test_mandible_train.csv", row.names=FALSE)
write.csv(test, "data/test_mandible_test.csv", row.names=FALSE)
names(data2)
data2 <- read.csv("data/test_mandible_data.csv", header=TRUE)
trainIdx <- createDataPartition(y=as.factor(data2$Group), p=0.75, list=FALSE)
train2 <- data2[trainIdx,]
test2 <- data2[-trainIdx,]
write.csv(train2, "data/test_mandible_train.csv", row.names=FALSE)
write.csv(test2, "data/test_mandible_test.csv", row.names=FALSE)
names(train2)
