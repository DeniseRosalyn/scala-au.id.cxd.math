package au.id.cxd.math.function.gamma

import au.id.cxd.math.function.Constants
import au.id.cxd.math.function.approximate.Chebyshev
import au.id.cxd.math.function.series.ContinuedSeries

/**
  * ##import MathJax
  *
  * approximate implementation of the regulated gamma function $\Gamma&#94;*$
  * based on the notes in GSL where
  *
  * $$
  * \Gamma&#94;*(x) = \Gamma(x) / \left( \sqrt{2\pi}x&#94;{(x-1/2)}\exp(-x) \right)
  * $$
  *
  *
  */
class GammaStarFn extends ContinuedSeries {

  private val gstar_a_data = List[Double](
    2.16786447866463034423060819465,
    -0.05533249018745584258035832802,
    0.01800392431460719960888319748,
    -0.00580919269468937714480019814,
    0.00186523689488400339978881560,
    -0.00059746524113955531852595159,
    0.00019125169907783353925426722,
    -0.00006124996546944685735909697,
    0.00001963889633130842586440945,
    -6.3067741254637180272515795142e-06,
    2.0288698405861392526872789863e-06,
    -6.5384896660838465981983750582e-07,
    2.1108698058908865476480734911e-07,
    -6.8260714912274941677892994580e-08,
    2.2108560875880560555583978510e-08,
    -7.1710331930255456643627187187e-09,
    2.3290892983985406754602564745e-09,
    -7.5740371598505586754890405359e-10,
    2.4658267222594334398525312084e-10,
    -8.0362243171659883803428749516e-11,
    2.6215616826341594653521346229e-11,
    -8.5596155025948750540420068109e-12,
    2.7970831499487963614315315444e-12,
    -9.1471771211886202805502562414e-13,
    2.9934720198063397094916415927e-13,
    -9.8026575909753445931073620469e-14,
    3.2116773667767153777571410671e-14,
    -1.0518035333878147029650507254e-14,
    3.4144405720185253938994854173e-15,
    -1.0115153943081187052322643819e-15
  )

  private val gstar_b_data = List[Double](
    0.0057502277273114339831606096782,
    0.0004496689534965685038254147807,
    -0.0001672763153188717308905047405,
    0.0000615137014913154794776670946,
    -0.0000223726551711525016380862195,
    8.0507405356647954540694800545e-06,
    -2.8671077107583395569766746448e-06,
    1.0106727053742747568362254106e-06,
    -3.5265558477595061262310873482e-07,
    1.2179216046419401193247254591e-07,
    -4.1619640180795366971160162267e-08,
    1.4066283500795206892487241294e-08,
    -4.6982570380537099016106141654e-09,
    1.5491248664620612686423108936e-09,
    -5.0340936319394885789686867772e-10,
    1.6084448673736032249959475006e-10,
    -5.0349733196835456497619787559e-11,
    1.5357154939762136997591808461e-11,
    -4.5233809655775649997667176224e-12,
    1.2664429179254447281068538964e-12,
    -3.2648287937449326771785041692e-13,
    7.1528272726086133795579071407e-14,
    -9.4831735252566034505739531258e-15,
    -2.3124001991413207293120906691e-15,
    2.8406613277170391482590129474e-15,
    -1.7245370321618816421281770927e-15,
    8.6507923128671112154695006592e-16,
    -3.9506563665427555895391869919e-16,
    1.6779342132074761078792361165e-16,
    -6.0483153034414765129837716260e-17
  )

  /**
    * implementation of gammastar_ser from gamma.c line: 954
    * @param x
    */
  private def gammastar_ser(x:Double) = {
    val y = 1.0/(x*x)
    val c0 = 1.0/12.0
    val c1 = -1.0/360.0
    val c2 = 1.0/1260.0
    val c3 = -1.0/1680.0
    val c4 = 1.0/1188.0
    val c5 = -691.0/360360.0
    val c6 = 1.0/156.0
    val c7 = -3617.0/122400.0
    val ser = c0 + poly(List(c0,c1,c2,c3,c4,c5,c6,c7), y)
    val result = Math.exp(ser/x)
    result
  }

  def op(x:Double):Double = {
    //    GammaFn(x) / ( Math.sqrt(2.0*Math.PI) * Math.pow(x, (x-0.5)) * Math.exp(-x)  )

    if (x <= 0.0) throw new IllegalArgumentException(s"x cannot be less than or equal to 0.0, x=$x")
    else if (x < 0.05) {
      val lg = LogGammaFn(x)._1
      val lx = Math.log(x)
      val c = 0.5 * (Constants.LN2+Constants.LN_PI)
      val lnr = lg - (x-0.5)*lx + x - c
      val result = Math.exp(lnr)
      result
    } else if (x < 2.0) {
      val t = 4.0/3.0*(x-0.5)-1.0
      val result = Chebyshev(gstar_a_data,-1,1).op(t)._1
      result
    } else if (x < 10.0) {
      val t = 0.25*(x-2.0)-1.0
      val result = Chebyshev(gstar_b_data,-1,1).op(t)._1
      result/(x*x) + 1.0 + 1.0/(12.0*x)
    } else if (x < 1.0/Constants.ROOT4_DBL_EPSILON) {
      // gammastsar_ser
      gammastar_ser(x)
    } else if (x < 1.0/Constants.DBL_EPSILON) {
      val xi = 1.0/x
      val result = 1.0 + xi/12.0*(1.0 + xi/24.0*(1.0 - xi*(139.0/180.0 + 571.0/8640.0*xi)))
      result
    } else {
      1.0
    }
  }
}
object GammaStarFn {
  def apply(x:Double) = new GammaStarFn().op(x)
}